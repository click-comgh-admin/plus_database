{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_assets_styles_views_admin_user_form_scss-src_view_membership_members_edit_pages_group_sub-a47fc0.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/network/members/groupings/group/group_member/bulk.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/group/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/subgroup/subgroup_member/bulk.ts","webpack://webpackNumbers/./src/view/membership/members/edit/pages/group_subgroup.ts"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_GroupingsBulkGroupMember(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group-member/bulk',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"members-groupings-group-member-bulk\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update Account Group(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group'\r\n    + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsSubGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/sub-group'\r\n  + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_GroupingsBulkSubgroupMember(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/sub-group-member/bulk',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"members-groupings-subgroup-member-bulk\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update Account Sub-Group(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import '@material/mwc-button';\r\nimport '@@addons/widgets/form/new/select';\r\nimport { GroupModel, Convert as gmConvert } from '@@addons/interfaces/members/groupings/group/models';\r\nimport { GroupMemberModel, Convert as gmmConvert } from '@@addons/interfaces/members/groupings/group/models/member';\r\nimport { SubGroupModel, Convert as sgmConvert } from '@@addons/interfaces/members/groupings/subgroup/models';\r\nimport { SubGroupMemberModel, Convert as sgmmConvert } from '@@addons/interfaces/members/groupings/subgroup/models/member';\r\nimport { GET_MemberGroupingsGroups } from '@@addons/network/members/groupings/group';\r\nimport { GET_GroupingsGroupMembers } from '@@addons/network/members/groupings/group/group_member';\r\nimport { POST_GroupingsBulkGroupMember } from '@@addons/network/members/groupings/group/group_member/bulk';\r\nimport { GET_MemberGroupingsSubGroups } from '@@addons/network/members/groupings/subgroup';\r\nimport { GET_GroupingsSubGroupMembers } from '@@addons/network/members/groupings/subgroup/subgroup_member';\r\nimport { POST_GroupingsBulkSubgroupMember } from '@@addons/network/members/groupings/subgroup/subgroup_member/bulk';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\n\r\n\r\ntype groupSubgroupType = { id: number; name: string; isSelected: \"true\" | \"false\"; selected: boolean; };\r\n@customElement(\"pdb-membership-update-view-group-subgroup\")\r\nexport class PdbMembershipUpdateViewGroupSubgroup extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public memberId?: number;\r\n\r\n  @property({ type: Array })\r\n  private _groups: GroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _subgroups: SubGroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  private memberGroups?: GroupMemberModel[] = null;\r\n\r\n  @property({ type: Array })\r\n  private memberSubGroups?: SubGroupMemberModel[] = null;\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    await this.getGroups();\r\n    await this.getSubGroups();\r\n    await this.getMemberGroups();\r\n    await this.getMemberSubgroups();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    const groupsSubgroups = this.groupsSubgroups,\r\n      groups = groupsSubgroups.groups,\r\n      subgroups = groupsSubgroups.subgroups;\r\n    return html`\r\n      <form method=\"post\" action=\"#\" class=\"form !my-1\" make-general-posts=\"--awaiting-type--\"\r\n        enctype=\"multipart/form-data\">\r\n        <div\r\n          class=\"flex rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-col px-2 mt-1 mb-2\">\r\n          <div class=\"grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 grid-flow-row gap-4\">\r\n            <div class=\"p-2\">\r\n              <h4 class=\"font-semibold my-2\">Select Account Group(s)</h4>\r\n              <select-input name=\"groups\" multiple class=\"w-full\" id=\"groups\" label=\"Select Account Group(s)\"\r\n                .options=\"${groups}\" outlined required>\r\n              </select-input>\r\n            </div>\r\n            <div class=\"p-2\">\r\n              <h4 class=\"font-semibold my-2\">Select Account Sub-Group(s)</h4>\r\n              <select-input name=\"subgroups\" multiple class=\"w-full\" id=\"subgroups\" label=\"Select Account Sub-Group(s)\"\r\n                .options=\"${subgroups}\" outlined required>\r\n              </select-input>\r\n            </div>\r\n            <input type=\"hidden\" name=\"memberId\" id=\"memberId\" value=\"${this.memberId}\" />\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"flex rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-row my-2 p-1 justify-evenly content-evenly\">\r\n          <div class=\"flex justify-end \">\r\n            <mwc-button class=\"primary\" raised type=\"submit\" label=\"Update Group(s)\" message=\"Update Group(s)\"\r\n              @click=\"${this.submitGroupsForm}\">\r\n            </mwc-button>\r\n          </div>\r\n          <div class=\"flex justify-end \">\r\n            <mwc-button class=\"info\" raised type=\"submit\" label=\"Update Sub-Group(s)\" message=\"Update Sub-Group(s)\"\r\n              @click=\"${this.submitSubGroupsForm}\">\r\n            </mwc-button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    `;\r\n  }\r\n\r\n  private get groupsSubgroups() {\r\n    type returnType = { groups: groupSubgroupType[], subgroups: groupSubgroupType[] };\r\n    let groups: groupSubgroupType[] = [];\r\n    let subgroups: groupSubgroupType[] = [];\r\n\r\n    // console.log({\"this._groups\": this._groups, \"this.memberGroups\": this.memberGroups});\r\n    // console.log({\"this._subgroups\": this._subgroups, \"this.memberSubGroups\": this.memberSubGroups});\r\n    \r\n\r\n    this._groups.forEach(_group => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      this.memberGroups?.forEach(group => {\r\n        if (group.groupId.id === _group.id) {\r\n          isSelected = true;\r\n          isSelectedAlt = \"true\";\r\n        }\r\n      });\r\n      const group: groupSubgroupType = {\r\n        id: _group.id, name: _group.group, isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!groups.includes(group)) {\r\n        groups.push(group);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._subgroups\": this._subgroups})\r\n    this._subgroups.forEach(_subgroup => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      this.memberSubGroups?.forEach(subgroup => {\r\n        if (subgroup.subgroupId.id === _subgroup.id) {\r\n          isSelected = true;\r\n          isSelectedAlt = \"true\";\r\n        }\r\n      });\r\n      const subgroup: groupSubgroupType = {\r\n        id: _subgroup.id, name: `${_subgroup.groupID.group} => ${_subgroup.subgroup}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!subgroups.includes(subgroup)) {\r\n        subgroups.push(subgroup);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._groups\": this._groups, \"this.memberGroups\": this.memberGroups});\r\n    // console.log({\"this._subgroups\": this._subgroups, \"this.memberSubGroups\": this.memberSubGroups});\r\n    // console.log({\"groups-groups\": groups, \"subgroups-subgroups\": subgroups});\r\n\r\n    const _returnType: returnType = {\r\n      groups: groups, subgroups: subgroups,\r\n    }\r\n    return _returnType;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private async getGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<any>();\r\n    let __groups: GroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __groups.push({ id: 0, group: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        // console.log({\"_networkResponse.response.data\": _networkResponse.response.data});\r\n\r\n        const DATA: GroupModel[] = _networkResponse.response.data.map((group: any) => gmConvert.toGroupModel(JSON.stringify(group)));\r\n        // console.log({DATA});\r\n        __groups = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<GroupModel> = [];\r\n    new_data.push(...this._groups, ...__groups);\r\n    this._groups = new_data;\r\n  }\r\n\r\n  private async getSubGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsSubGroups<any>();\r\n    let __subgroups: SubGroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __subgroups.push({ id: 0, subgroup: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: SubGroupModel[] = _networkResponse.response.data.map((subgroup: any) => sgmConvert.toSubGroupModel(JSON.stringify(subgroup)));\r\n        // console.log({DATA});\r\n        __subgroups = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<SubGroupModel> = [];\r\n    new_data.push(...this._subgroups, ...__subgroups);\r\n    this._subgroups = new_data;\r\n  }\r\n\r\n  private async getMemberGroups() {\r\n    const _networkResponse = await GET_GroupingsGroupMembers<any>(null, \"?memberId=\" + this.memberId);\r\n    if (_networkResponse === null) {\r\n      this.memberGroups = [];\r\n    } else {\r\n      const memberGroups = Array.isArray(_networkResponse.paginResponse.results) ? _networkResponse.paginResponse.results : [_networkResponse.paginResponse.results]\r\n      this.memberGroups = memberGroups.map(memberGroup => gmmConvert.toGroupMemberModel(JSON.stringify(memberGroup)));\r\n    }\r\n  }\r\n\r\n  private async getMemberSubgroups() {\r\n    const _networkResponse = await GET_GroupingsSubGroupMembers<any>(null, \"?memberId=\" + this.memberId);\r\n    if (_networkResponse === null) {\r\n      this.memberSubGroups = [];\r\n    } else {\r\n      const memberSubGroups = Array.isArray(_networkResponse.paginResponse.results) ? _networkResponse.paginResponse.results : [_networkResponse.paginResponse.results]\r\n      this.memberSubGroups = memberSubGroups.map(memberSubGroup => sgmmConvert.toSubGroupMemberModel(JSON.stringify(memberSubGroup)));\r\n    }\r\n  }\r\n\r\n  async submitGroupsForm(e: PointerEvent) {\r\n    const _handleMultitpleSubmitFormSelectors = this.handleMultitpleSubmitFormSelectors();\r\n    _handleMultitpleSubmitFormSelectors.handle(\"group\");\r\n\r\n    await POST_GroupingsBulkGroupMember();\r\n    _handleMultitpleSubmitFormSelectors.reset(\"group\");\r\n  }\r\n\r\n  async submitSubGroupsForm(e: PointerEvent) {\r\n    const _handleMultitpleSubmitFormSelectors = this.handleMultitpleSubmitFormSelectors();\r\n    _handleMultitpleSubmitFormSelectors.handle(\"subgroup\");\r\n\r\n    await POST_GroupingsBulkSubgroupMember();\r\n    _handleMultitpleSubmitFormSelectors.reset(\"subgroup\");\r\n  }\r\n\r\n  handleMultitpleSubmitFormSelectors() {\r\n    type submit_type = \"group\" | \"subgroup\";\r\n    return {\r\n      handle: (submitType: submit_type) => {\r\n        // console.log({submitType});\r\n\r\n        document.querySelectorAll('[make-general-posts=\"--awaiting-type--\"]').forEach(form => {\r\n          if (form.hasAttribute(\"make-general-posts\")) {\r\n            // console.log({formSubmitType});\r\n            form.setAttribute(\"make-general-posts\", `members-groupings-${submitType}-member-bulk`)\r\n          }\r\n        });\r\n      },\r\n      reset: (submitType: submit_type) => {\r\n        document.querySelectorAll(`[make-general-posts=\"members-groupings-${submitType}-member-bulk\"]`).forEach(form => {\r\n          form.setAttribute(\"make-general-posts\", \"--awaiting-type--\")\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["POST_GroupingsBulkGroupMember","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","method","body","headers","Authorization","token","then","HTTP","networkCallRes","NetWorkCallResponses","_RESPONSE","response","unknownError","length","errors","forEach","e","err","errormsg","error","id","push","res","https_swal_error_format","catch","String","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","GET_MemberGroupingsGroups","type","url_params","console","errorHttp","GET_MemberGroupingsSubGroups","POST_GroupingsBulkSubgroupMember","PdbMembershipUpdateViewGroupSubgroup","LitElement","constructor","super","_groups","_subgroups","memberGroups","memberSubGroups","connectedCallback","this","getGroups","getSubGroups","getMemberGroups","getMemberSubgroups","disconnectedCallback","render","groupsSubgroups","groups","subgroups","html","memberId","submitGroupsForm","submitSubGroupsForm","_group","isSelected","isSelectedAlt","group","groupId","name","selected","includes","_subgroup","subgroup","subgroupId","groupID","firstUpdated","_networkResponse","__groups","date","Date","data","map","JSON","stringify","new_data","__subgroups","GET_GroupingsGroupMembers","Array","isArray","paginResponse","results","memberGroup","GET_GroupingsSubGroupMembers","memberSubGroup","_handleMultitpleSubmitFormSelectors","handleMultitpleSubmitFormSelectors","handle","reset","submitType","querySelectorAll","form","hasAttribute","setAttribute","createRenderRoot","styles","css","property","Number","customElement"],"sourceRoot":""}