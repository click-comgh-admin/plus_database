{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_interfaces_clients_users_access_ts-src_view_admin_user_form_group_subgroup_ts-src_-300e54.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/page_access/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/users/access.ts","webpack://webpackNumbers/./src/addons/network/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_add.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_update.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/group/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/view/admin/user/form/group_subgroup.ts","webpack://webpackNumbers/./src/view/admin/user/page__id.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","export interface ClientPageAccess_I {\r\n  id?: number,\r\n  page?: string,\r\n}\r\nexport function ClientPageAccess_S(data: any): ClientPageAccess_I {\r\n  // console.log({data});\r\n  \r\n  const clientPageAccess_S: ClientPageAccess_I = {\r\n    id: Number(data['id']),\r\n    page: data['page'],\r\n  };\r\n\r\n  return clientPageAccess_S;\r\n}","import { ClientPageAccess_I, ClientPageAccess_S } from \"../page_access\";\r\n\r\nexport interface ClientUserAccess_I {\r\n  id?: number,\r\n  clientId?: number,\r\n  userId?: number,\r\n  page?: ClientPageAccess_I,\r\n  isUnlimited?: number,\r\n  date?: Date,\r\n}\r\nexport function ClientUserAccess_S(data: any): ClientUserAccess_I {\r\n  // console.log({data});\r\n  \r\n  const clientUserAccess_S: ClientUserAccess_I = {\r\n    id: Number(data['id']),\r\n    clientId: data['clientId'],\r\n    userId: data['userId'],\r\n    page: ClientPageAccess_S(data['pageId']),\r\n    isUnlimited: data['isUnlimited'],\r\n    date: new Date(data['date']),\r\n  };\r\n\r\n  return clientUserAccess_S;\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientBranches<Type>(type: Number = null) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/branch'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_ClientUserGroupSubgroup(): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUserGroupSubgroup(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update user group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group'\r\n    + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsSubGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/sub-group'\r\n  + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import '@@assets/styles/views/admin/user/form.scss';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-textfield';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-tab';\r\nimport '@material/mwc-tab-bar';\r\nimport '@@addons/widgets/form/new/select';\r\nimport { getActiveBranchIdCookie } from '@@addons/functions/views/home/branch';\r\nimport { ClientBranches_I, ClientBranchShort_I } from '@@addons/interfaces/clients/branches';\r\nimport { NetworkCallResponse_I } from '@@addons/interfaces/network_calls/response';\r\nimport { GET_ClientBranches } from '@@addons/network/clients/branches';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { UserLoginInfo_I } from '@@addons/interfaces/network_calls/login';\r\nimport { ClientUsers_I } from '@@addons/interfaces/clients/users';\r\nimport { GET_MemberGroupingsGroups } from '@@addons/network/members/groupings/group';\r\nimport { GET_MemberGroupingsSubGroups } from '@@addons/network/members/groupings/subgroup';\r\nimport { POST_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_add';\r\nimport { PUT_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_update';\r\nimport { GroupModel, Convert as gmConvert } from '@@addons/interfaces/members/groupings/group/models';\r\nimport { SubGroupModel, Convert as sgmConvert } from '@@addons/interfaces/members/groupings/subgroup/models';\r\nimport { ClientUserGroupSubgroupModel } from '@@addons/interfaces/clients/users/model/group_subgroup';\r\n\r\n\r\ntype groupSubgroupType = { id: number; name: string; isSelected: \"true\" | \"false\"; selected: boolean; };\r\n@customElement(\"pdb-admin-user-group-subgroup-form\")\r\nexport class PdbAdminUserGroupSubgroupForm extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public userId?: number = 0;\r\n\r\n  @property({ type: String })\r\n  public edit: \"true\" | \"false\" = \"false\";\r\n\r\n  @property({ type: Boolean })\r\n  public editAccess?: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  public isEditable?: boolean = false;\r\n\r\n  @property({ type: String })\r\n  public page_type: \"mine\" | \"not-mine\" = \"mine\";\r\n\r\n  @property({ type: Array })\r\n  private _branches: ClientBranches_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _groups: GroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _subgroups: SubGroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  private get _clientUserDefault(): NetworkCallResponse_I<ClientUsers_I> {\r\n    const user: ClientUsers_I = {};\r\n    return { data: user, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUser: NetworkCallResponse_I<ClientUsers_I> = this._clientUserDefault;\r\n\r\n  public set clientUser(value: NetworkCallResponse_I<ClientUsers_I>) {\r\n    this._clientUser = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUser(): NetworkCallResponse_I<ClientUsers_I> {\r\n    return this._clientUser;\r\n  }\r\n\r\n  private get _clientUserGroupSubgroupDefault(): NetworkCallResponse_I<ClientUserGroupSubgroupModel> {\r\n    const groupSubgroup: ClientUserGroupSubgroupModel = {};\r\n    return { data: groupSubgroup, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUserGroupSubgroup: NetworkCallResponse_I<ClientUserGroupSubgroupModel> = this._clientUserGroupSubgroupDefault;\r\n\r\n  public set clientUserGroupSubgroup(value: NetworkCallResponse_I<ClientUserGroupSubgroupModel>) {\r\n    this._clientUserGroupSubgroup = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUserGroupSubgroup(): NetworkCallResponse_I<ClientUserGroupSubgroupModel> {\r\n    return this._clientUserGroupSubgroup;\r\n  }\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    const activeBranchId = getActiveBranchIdCookie();\r\n    this._activeBranchId = (activeBranchId === null) ? null : [activeBranchId];\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    await this.getBranches();\r\n    await this.getGroups();\r\n    await this.getSubGroups();\r\n\r\n    // console.log({\"clientUser\": this.clientUser});\r\n    // console.log({\"clientUserGroupSubgroup\": this.clientUserGroupSubgroup});\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    if (this.edit === \"true\") {\r\n      if (this.page_type === \"mine\") {\r\n        this.isEditable = true;\r\n      } else {\r\n        if (this.editAccess) {\r\n          this.isEditable = true;\r\n        } else {\r\n          this.isEditable = false;\r\n        }\r\n      }\r\n      return html`\r\n        ${this.groupSubgroup}\r\n      `;\r\n    } else {\r\n      return html`\r\n        ${this.form}\r\n      `;\r\n    }\r\n  }\r\n\r\n  private get groupSubgroup() {\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Update Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\" enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Update Group(s)/ Subgroup(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get form() {\r\n\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Add Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\"\r\n                enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n      \r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Add Group(s)/ Sub-Group(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get groupsSubgroups() {\r\n    type returnType = { groups: groupSubgroupType[], subgroups: groupSubgroupType[] };\r\n    let groups: groupSubgroupType[] = [];\r\n    let subgroups: groupSubgroupType[] = [];\r\n\r\n    const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n      _data = clientUserGroupSubgroup.data,\r\n      DATA = Array.isArray(_data) ? _data[0] : _data,\r\n      SUCCESS = clientUserGroupSubgroup.success;\r\n\r\n    this._groups.forEach(_group => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA?.group.forEach(group => {\r\n          if (group.id === _group.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const group: groupSubgroupType = {\r\n        id: _group.id, name: _group.group, isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!groups.includes(group)) {\r\n        groups.push(group);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._subgroups\": this._subgroups})\r\n    this._subgroups.forEach(_subgroup => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA?.subgroup.forEach(subgroup => {\r\n          if (subgroup.id === _subgroup.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const subgroup: groupSubgroupType = {\r\n        id: _subgroup.id, name: `${_subgroup.groupID.group} => ${_subgroup.subgroup}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!subgroups.includes(subgroup)) {\r\n        subgroups.push(subgroup);\r\n      }\r\n    });\r\n\r\n    const _returnType: returnType = {\r\n      groups: groups, subgroups: subgroups,\r\n    }\r\n    return _returnType;\r\n  }\r\n\r\n  private get accessFieldSelectBox() {\r\n    const groupsSubgroups = this.groupsSubgroups,\r\n      groups = groupsSubgroups.groups,\r\n      subgroups = groupsSubgroups.subgroups;\r\n\r\n    return html`\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Group(s)</h4>\r\n        <select-input name=\"group\" multiple class=\"w-full\" id=\"group\" label=\"Select User Group(s)\" .options=\"${groups}\"\r\n          outlined required>\r\n        </select-input>\r\n      </div>\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Sub-Group(s)</h4>\r\n        <select-input name=\"subgroup\" multiple class=\"w-full\" id=\"subgroup\" label=\"Select User Sub-Group(s)\"\r\n          .options=\"${subgroups}\" outlined required>\r\n        </select-input>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranches_I>();\r\n    let __branches: ClientBranches_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: ClientBranches_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n\r\n    const new_data: Array<ClientBranches_I> = [];\r\n    new_data.push(...this._branches, ...__branches);\r\n    this._branches = new_data;\r\n  }\r\n\r\n  private async getGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<any>();\r\n    let __groups: GroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __groups.push({ id: 0, group: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        // console.log({\"_networkResponse.response.data\": _networkResponse.response.data});\r\n\r\n        const DATA: GroupModel[] = _networkResponse.response.data.map((group: any) => gmConvert.toGroupModel(JSON.stringify(group)));\r\n        // console.log({DATA});\r\n        __groups = DATA;\r\n      }\r\n    }\r\n    \r\n    const new_data: Array<GroupModel> = [];\r\n    new_data.push(...this._groups, ...__groups);\r\n    this._groups = new_data;\r\n  }\r\n\r\n  private async getSubGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsSubGroups<any>();\r\n    let __subgroups: SubGroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __subgroups.push({ id: 0, subgroup: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: SubGroupModel[] = _networkResponse.response.data.map((subgroup: any) => sgmConvert.toSubGroupModel(JSON.stringify(subgroup)));\r\n        // console.log({DATA});\r\n        __subgroups = DATA;\r\n      }\r\n    }\r\n    \r\n    const new_data: Array<SubGroupModel> = [];\r\n    new_data.push(...this._subgroups, ...__subgroups);\r\n    this._subgroups = new_data;\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n\r\n    if (this.edit === \"true\") {\r\n      if (this.isEditable) {\r\n        const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n          _data = clientUserGroupSubgroup.data,\r\n          DATA = Array.isArray(_data) ? _data[0] : _data,\r\n          SUCCESS = clientUserGroupSubgroup.success;\r\n        if (SUCCESS) {\r\n          try {\r\n          await PUT_ClientUserGroupSubgroup(DATA.id);\r\n            \r\n          } catch (error) {\r\n            await POST_ClientUserGroupSubgroup();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n    }\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","export const PAGE__IDS = {\r\n  \"view\": 25,\r\n  \"create\": 26,\r\n  \"update\": 27,\r\n};"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","ClientPageAccess_S","id","Number","page","ClientUserAccess_S","clientId","userId","isUnlimited","date","Date","GET_ClientBranches","type","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","token","NetWorkCallResponses","console","errorHttp","POST_ClientUserGroupSubgroup","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","body","then","networkCallRes","_RESPONSE","response","unknownError","length","errors","e","err","errormsg","push","res","catch","String","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","PUT_ClientUserGroupSubgroup","ID","GET_MemberGroupingsGroups","url_params","GET_MemberGroupingsSubGroups","PdbAdminUserGroupSubgroupForm","LitElement","constructor","super","edit","editAccess","isEditable","page_type","_branches","_groups","_subgroups","_activeBranchId","_userLoginInfo","_clientUser","this","_clientUserDefault","_clientUserGroupSubgroup","_clientUserGroupSubgroupDefault","clientUser","requestUpdate","clientUserGroupSubgroup","connectedCallback","activeBranchId","getActiveBranchIdCookie","getBranches","getGroups","getSubGroups","disconnectedCallback","render","html","groupSubgroup","form","accountId","accessFieldSelectBox","submitForm","groupsSubgroups","groups","subgroups","_data","DATA","SUCCESS","_group","isSelected","isSelectedAlt","group","name","selected","includes","_subgroup","subgroup","groupID","firstUpdated","_networkResponse","__branches","new_data","__groups","map","JSON","stringify","__subgroups","preventDefault","createRenderRoot","styles","css","property","Boolean","customElement","PAGE__IDS"],"sourceRoot":""}