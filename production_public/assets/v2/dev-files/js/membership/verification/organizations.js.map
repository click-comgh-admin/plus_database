{"version":3,"file":"../../production_public/assets/v2/dev-files/js/membership/verification/organizations.js","mappings":"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","sources":["webpack://webpackNumbers/webpack/universalModuleDefinition","webpack://webpackNumbers/./src/view/membership/verification/organizations/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"webpackNumbers\"] = factory();\n\telse\n\t\troot[\"webpackNumbers\"] = factory();\n})(self, () => {\nreturn ","import '@@assets/styles/views/branch/main.scss';\r\nimport \"@@assets/styles/views/home/dashboard.scss\";\r\nimport { LitElement, html, css, TemplateResult } from 'lit';\r\nimport { customElement, property, query, queryAll } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-textfield';\r\nimport '@@widgets/datatables';\r\nimport '@@interfaces/datatables';\r\nimport '@material/mwc-circular-progress';\r\nimport '@@addons/widgets/form/new/select';\r\nimport \"@@addons/widgets/buttons/link-buttons/link-button\";\r\nimport { getActiveBranchIdCookie } from '@@addons/functions/views/home/branch';\r\nimport { ClientBranchShort_I } from '@@addons/interfaces/clients/branches';\r\nimport '@@addons/widgets/profile_photo';\r\nimport { base64Encode } from '@@addons/functions/base64';\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { urlQueryParams, urlQueryParamsGetAll, urlQueryParamsJoin } from '@@addons/functions/url_query_params';\r\nimport { FilterFieldBox } from '@@addons/classes/filter_field_box';\r\nimport { Button } from '@material/mwc-button';\r\nimport '../../members/select-member-type';\r\nimport '../../../no_access/account_expired';\r\nimport { getAppSettingsExtraSettings } from '@@addons/functions/app_settings/extra_settings';\r\nimport '../../../no_access/no_page_entry';\r\nimport { AppSettingsExtraUserAccess } from '@@addons/functions/app_settings/extra_settings/user_access';\r\nimport { PAGE__IDS } from '../page__id';\r\nimport { AppSetup } from '@@addons/functions/app_settings';\r\nimport { GroupModel, Convert as gmConvert } from '@@addons/interfaces/members/groupings/group/models';\r\nimport { SubGroupModel, Convert as sgmConvert } from '@@addons/interfaces/members/groupings/subgroup/models';\r\nimport { GET_MemberGroupingsGroups } from '@@addons/network/members/groupings/group';\r\nimport { GET_MemberGroupingsSubGroups } from '@@addons/network/members/groupings/subgroup';\r\nimport { ClientBranchModel, Convert as cbmConvert } from '@@addons/interfaces/clients/branches/model';\r\nimport { GET_ClientBranches } from '@@addons/network/clients/branches';\r\nimport { SelectInputProcessedAjaxResponse_I, SelectInputProcessedAjaxUrlParam_I } from '@@addons/interfaces/form/select-input';\r\nimport { QueryOptions } from 'select2';\r\nimport { MembershipOrganizationUserModel, Convert as MouMconvert } from '@@addons/interfaces/members/user/organization_model';\r\nimport { UserLoginInfo_I } from '@@addons/interfaces/network_calls/login';\r\nimport { MembershipVerificationModel, Convert as mvmConvert } from '@@addons/interfaces/members/verification';\r\nimport { getDate } from '@@addons/functions/date_time/date';\r\nimport { getLocalTime } from '@@addons/functions/date_time/time';\r\nimport { POST_MemberVerification } from '@@addons/network/members/membership/verification/post';\r\nimport { POST_MemberVerificationBulk } from '@@addons/network/members/membership/verification/post_bulk';\r\nimport { DELETE_MemberVerification } from '@@addons/network/members/membership/verification/delete';\r\nimport { DELETE_MemberVerificationBulk } from '@@addons/network/members/membership/verification/delete_bulk';\r\nimport { GET_MembershipUserIds } from '@@addons/network/members/membership/users/members';\r\nimport { MembershipMixedUserModel, Convert as mmumConvert } from '@@addons/interfaces/members/user/mixed';\r\nimport { until } from 'lit/directives/until.js';\r\nimport { MembershipAutoVerificationModel, Convert as mavmConvert } from '@@addons/interfaces/members/verification/auto';\r\nimport { GET_MemberVerificationAuto } from '@@addons/network/members/membership/verification/auto_verification_get';\r\nimport { POST_MemberVerificationAuto } from '@@addons/network/members/membership/verification/auto_verification_set';\r\n\r\n\r\ntype filterSelectType = { id: number | \"\"; name: string; isSelected: \"true\" | \"false\"; selected: boolean; };\r\n@customElement(\"pdb-membership-organization-verification\")\r\nexport class PdbMembershipOrganizationVerification extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @query('[filter-section-context=\"btn\"]')\r\n  private filterSectionContextBtn: Button;\r\n\r\n  @query('[filter-section-context=\"container\"]')\r\n  private filterSectionContextContainer: Element;\r\n\r\n  @query('[make-general-posts=\"submit_filter_form\"]')\r\n  private filterSectionContextForm: HTMLFormElement;\r\n\r\n  @property({ type: String })\r\n  private memberProfileBaseUrl: string = \"/member/member-profile?view=\";\r\n\r\n  // @property({ type: String })\r\n  // private memberProfileEditBaseUrl: string = \"/member/update-profile?edit=\";\r\n\r\n  @property({ type: Array })\r\n  private _groups: GroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _subgroups: SubGroupModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  public _branches: ClientBranchModel[] = [];\r\n\r\n  @property({ type: Array })\r\n  public _autoVerifications: MembershipAutoVerificationModel[] = [];\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private accountType: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private selectedBranch: number = 1;\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Number })\r\n  private _memberType?: number = 1;\r\n\r\n  @property({ type: Boolean })\r\n  private _hasSetup: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  private _selectedMembersCalled: boolean = false;\r\n\r\n  @property({ type: Array })\r\n  private _selectedMembersNames: TemplateResult<1>[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  private filterBox: FilterFieldBox;\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    AppSetup().then(() => this._hasSetup = true);\r\n\r\n    const activeBranchId = getActiveBranchIdCookie();\r\n    this._activeBranchId = (activeBranchId === null) ? null : [activeBranchId];\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    if (this._userLoginInfo !== null) {\r\n      if (this._userLoginInfo.length > 0) {\r\n        this.accountType = 2;\r\n        this.selectedBranch = this._userLoginInfo[0].user.branchId;\r\n        // console.log({ \"this.selectedBranch\": this.selectedBranch });        \r\n      }\r\n    }\r\n\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      }\r\n    });\r\n\r\n    await this.getAutoVerification();\r\n    await this.getBranches();\r\n    await this.getGroups();\r\n    await this.getSubGroups();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    if (this._hasSetup) {\r\n      if (getAppSettingsExtraSettings()?.expiration_date.expired) {\r\n        return html`<account-expired-component></account-expired-component>`;\r\n      }\r\n      if (!AppSettingsExtraUserAccess({ pageId: PAGE__IDS.access, viewType: \"Both\" }, false)) {\r\n        return html`<no-page-entry-component></no-page-entry-component>`;\r\n      }\r\n    }\r\n    return html`\r\n      <span class=\"flex flex-row md:flex-col w-100\"></span>\r\n      <div class=\"block my-1 shadow bg-white p-2\">\r\n        <mwc-button icon=\"open_with\" label=\"Filters\" raised class=\"primary mt-1\" filter-section-context=\"btn\"\r\n          @click=\"${this.filterBox.toggleFilterFields}\">\r\n        </mwc-button>\r\n      </div>\r\n      <div class=\"block my-1 shadow bg-white p-2\">\r\n        ${this.filterForm}\r\n      </div>\r\n      <div class=\"block my-1 shadow bg-white p-2\">\r\n        ${this.table}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      },\r\n    });\r\n  }\r\n\r\n  private get filterForm() {\r\n    let returnHtml = html``;\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_branchId = \"filter_branchId\",\r\n      filterNameId_filter_search = \"filter_search\",\r\n      filterNameId_filter_memberCategoryId = \"filter_memberCategoryId\",\r\n      filterNameId_filter_groupIds = \"filter_groupIds\",\r\n      filterNameId_filter_subGroupIds = \"filter_subGroupIds\",\r\n      filterNameId_filter_memberIds = \"filter_memberIds\",\r\n      // filterNameId_filter_verificationIds = \"filter_verificationIds\",\r\n      filterNameId_filter_verification = \"filter_verification\";\r\n    // filter_accountType:2\r\n    // filter_verification:true\r\n\r\n    let filterNameId_filter_branchIdVal: string[] = null,\r\n      filterNameId_filter_searchVal: string = null,\r\n      filterNameId_filter_memberCategoryIdVal: string[] = null,\r\n      filterNameId_filter_groupIdsVal: string[] = null,\r\n      filterNameId_filter_subGroupIdsVal: string[] = null,\r\n      filterNameId_filter_memberIdsVal: string[] = null,\r\n      // filterNameId_filter_verificationIdsVal: string = null,\r\n      filterNameId_filter_verificationVal: string = null;\r\n    // console.log({_urlQueryParams, \"urlQueryParamsGetAll('groupId[]')\": urlQueryParamsGetAll('groupId[]')});\r\n\r\n    for (const key in _urlQueryParams) {\r\n      // console.log({\"`--------${key}--------`\": `--------${key}--------`});\r\n\r\n      let value = String(_urlQueryParams[key]);\r\n      value = value === \"\" ? null : value;\r\n      if (key === `${filterNameId_filter_branchId}[]`) {\r\n        // filterNameId_filter_branchIdVal = value;\r\n        filterNameId_filter_branchIdVal = urlQueryParamsGetAll(`${filterNameId_filter_branchId}[]`);\r\n      }\r\n      if (key === filterNameId_filter_search) {\r\n        filterNameId_filter_searchVal = value;\r\n      }\r\n      if (key === `${filterNameId_filter_memberCategoryId}[]`) {\r\n        // filterNameId_filter_memberCategoryIdVal = value;\r\n        // console.log({filterNameId_filter_memberCategoryId});\r\n\r\n        filterNameId_filter_memberCategoryIdVal = urlQueryParamsGetAll(`${filterNameId_filter_memberCategoryId}[]`);\r\n      }\r\n      if (key === `${filterNameId_filter_groupIds}[]`) {\r\n        // filterNameId_filter_groupIdsVal = value;\r\n        filterNameId_filter_groupIdsVal = urlQueryParamsGetAll(`${filterNameId_filter_groupIds}[]`);\r\n      }\r\n      if (key === `${filterNameId_filter_subGroupIds}[]`) {\r\n        // filterNameId_filter_subGroupIdsVal = value;\r\n        filterNameId_filter_subGroupIdsVal = urlQueryParamsGetAll(`${filterNameId_filter_subGroupIds}[]`);\r\n      }\r\n      if (key === `${filterNameId_filter_memberIds}[]`) {\r\n        // filterNameId_filter_memberIdsVal = value;\r\n        filterNameId_filter_memberIdsVal = urlQueryParamsGetAll(`${filterNameId_filter_memberIds}[]`);\r\n        // console.log({filterNameId_filter_memberIdsVal});\r\n\r\n      }\r\n      // if (key === filterNameId_filter_verificationIds) {\r\n      //   filterNameId_filter_verificationIdsVal = value;\r\n      // }\r\n      if (key === filterNameId_filter_verification) {\r\n        filterNameId_filter_verificationVal = value;\r\n      }\r\n    }\r\n\r\n    const searchField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Search By Name/ E-mail/ Phone Number</h4>\r\n          <mwc-textfield type=\"text\" name=\"${filterNameId_filter_search}\" id=\"${filterNameId_filter_search}\"\r\n            label=\"Search By Name/ E-mail/ Phone Number\"\r\n            value=\"${filterNameId_filter_searchVal === null ? \"\" : filterNameId_filter_searchVal}\" outlined required>\r\n          </mwc-textfield>\r\n        </div>\r\n      </div>`;\r\n\r\n    let userBranch = 0;\r\n    if (this._userLoginInfo !== null) {\r\n      if (this._userLoginInfo.length > 0) {\r\n        userBranch = this._userLoginInfo[0].user.branchId;\r\n      }\r\n    }\r\n\r\n    const selectedGroupIDs = Array.isArray(filterNameId_filter_groupIdsVal) ? filterNameId_filter_groupIdsVal.map(item => Number.isNaN(item) ? 0 : Number(item)) : [],\r\n      selectedSubGroupIDs = Array.isArray(filterNameId_filter_subGroupIdsVal) ? filterNameId_filter_subGroupIdsVal.map(item => Number.isNaN(item) ? 0 : Number(item)) : [],\r\n      selectedBranchIDs = Array.isArray(filterNameId_filter_branchIdVal) ? filterNameId_filter_branchIdVal.map(item => Number.isNaN(item) ? 0 : Number(item)) : [];\r\n    const groupsSubgroupsBranches = this.groupsSubgroupsBranches(selectedGroupIDs, selectedSubGroupIDs, selectedBranchIDs);\r\n\r\n    const branchField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Select Branches</h4>\r\n          <select-input name=\"${filterNameId_filter_branchId}\" class=\"w-full\" id=\"${filterNameId_filter_branchId}\"\r\n            label=\"Select Branches\" .options=\"${groupsSubgroupsBranches.branches}\" outlined required multiple>\r\n          </select-input>\r\n        </div>\r\n      </div>`;\r\n\r\n    const verificationField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Select Verification Status</h4>\r\n          <mwc-select name=\"${filterNameId_filter_verification}\" id=\"${filterNameId_filter_verification}\"\r\n            label=\"Select Verification Status\" outlined required>\r\n            <mwc-list-item value=\"\">Select Verification Status</mwc-list-item>\r\n            <mwc-list-item value=\"1\"\r\n              ?selected=\"${Number.isNaN(filterNameId_filter_verificationVal) ? false : Number(filterNameId_filter_verificationVal) === 1}\">\r\n              Verified</mwc-list-item>\r\n            <mwc-list-item value=\"2\"\r\n              ?selected=\"${Number.isNaN(filterNameId_filter_verificationVal) ? false : Number(filterNameId_filter_verificationVal) === 2}\">\r\n              Un-Verified</mwc-list-item>\r\n          </mwc-select>\r\n        </div>\r\n      </div>`;\r\n\r\n    const memberCategoryIDs = Array.isArray(filterNameId_filter_memberCategoryIdVal) ? filterNameId_filter_memberCategoryIdVal.map(item => Number.isNaN(item) ? 0 : Number(item)) : [];\r\n    // console.log({memberCategoryIDs, filterNameId_filter_memberCategoryIdVal});\r\n\r\n    const memberCategoryField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Member Categories</h4>\r\n          <pdb-membership-select-member-type .defaultValues=\"${memberCategoryIDs}\"\r\n            name=\"${filterNameId_filter_memberCategoryId}\" id=\"${filterNameId_filter_memberCategoryId}\"\r\n            label=\"Select Member Category\" outlined required multiple material=\"false\">\r\n          </pdb-membership-select-member-type>\r\n        </div>\r\n      </div>`;\r\n    // console.log({groupsSubgroupsBranches});\r\n\r\n    const groupField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Select Groups</h4>\r\n          <select-input name=\"${filterNameId_filter_groupIds}\" class=\"w-full\" id=\"${filterNameId_filter_groupIds}\"\r\n            label=\"Select Groups\" .options=\"${groupsSubgroupsBranches.groups}\" outlined required multiple>\r\n          </select-input>\r\n        </div>\r\n      </div>`;\r\n\r\n    const subGroupField = html`\r\n      <div class=\"col-xl-6 col-md-6\">\r\n        <div class=\"form-input-container !block\">\r\n          <h4 class=\"font-semibold my-2\">Select Sub-Groups</h4>\r\n          <select-input name=\"${filterNameId_filter_subGroupIds}\" class=\"w-full\" id=\"${filterNameId_filter_subGroupIds}\"\r\n            label=\"Select Sub-Groups\" .options=\"${groupsSubgroupsBranches.subgroups}\" outlined required multiple>\r\n          </select-input>\r\n        </div>\r\n      </div>`;\r\n\r\n    const memberListField = html`\r\n      <div class=\"col-xl-12 col-md-12\">\r\n        <div class=\"form-input-container !block\">\r\n          ${this.memberListField}\r\n          <div class=\"flex flex-wrap gap-2 p-1 my-2 shadow\">\r\n            ${until(this.getMembersByIds(filterNameId_filter_memberIdsVal?.map(memberId => Number.isNaN(memberId) ? 0 :\r\n      Number(memberId))), html`<span>Loading...</span>`)}\r\n          </div>\r\n        </div>\r\n      </div>`;\r\n\r\n    returnHtml = html`<form method=\"get\" class=\"form\" make-general-posts=\"submit_filter_form\" filter-section-context=\"container\" hidden>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      ${searchField} ${verificationField} ${memberCategoryField} ${branchField}\r\n      <div class=\"col-md-12 my-2\">\r\n        <hr />\r\n      </div>\r\n      ${groupField} ${subGroupField} ${memberListField}\r\n      <div class=\"col-xl-12 col-md-10\">\r\n        <div class=\"form-input-container mt-1\">\r\n          <mwc-button label=\"Clear\" @click=\"${this.filterBox.clear_filter}\"></mwc-button>\r\n          <mwc-button label=\"Filter\" raised @click=\"${this.filterBox.submit}\"></mwc-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n</form>`\r\n    return returnHtml;\r\n  }\r\n\r\n  async getMembersByIds(memberIds: Array<Number>) {\r\n    memberIds = memberIds === null ? [] : memberIds;\r\n    // console.log({memberIds, \"this._selectedMembersCalled\": this._selectedMembersCalled});\r\n\r\n    let _members: MembershipMixedUserModel[] = [];\r\n\r\n    if (this._selectedMembersCalled === false && memberIds?.length > 0) {\r\n      this._selectedMembersCalled = true;\r\n      const _networkResponse = await GET_MembershipUserIds<any>(memberIds);\r\n\r\n      if (_networkResponse !== null) {\r\n        // @ts-ignore\r\n        // console.log({\"_networkResponse.data.paginResponse\": _networkResponse.data});\r\n\r\n        if ((_networkResponse.response.success === true)) {\r\n          const _DATAS = _networkResponse.response.data;\r\n          // console.log({_DATAS});\r\n\r\n          const DATA: MembershipMixedUserModel[] = _DATAS.results?.map((member: any) => mmumConvert.toMembershipMixedUserModel(JSON.stringify(member)));\r\n          // console.log({DATA});\r\n          _members = DATA;\r\n        }\r\n      }\r\n      const _selectedMembersNames = _members?.map(member => {\r\n        return html`\r\n          <span\r\n            class=\"flex h-fit items-center gap-1 font-semibold bg-blue-100 text-blue-800 dark:bg-blue-200 dark:text-blue-800 group-hover:bg-blue-200 dark:group-hover:bg-blue-300 rounded-full p-1.5 text-xs\">\r\n            <span>${member.organizationName}</span>\r\n          </span>\r\n        `;\r\n      });\r\n      this._selectedMembersNames = _selectedMembersNames;\r\n    }\r\n    return this._selectedMembersNames;\r\n  }\r\n\r\n  branchChange(e: Event) {\r\n    const accountType = this.accountType;\r\n    this.accountType = 2;\r\n    // @ts-ignore\r\n    this.selectedBranch = Number.isNaN(e.currentTarget.value) ? 0 : Number(e.currentTarget.value);\r\n    // console.log({ \"this.selectedBranch\": this.selectedBranch });\r\n  }\r\n\r\n  private groupsSubgroupsBranches(selectedGroupIDs: Array<number>, selectedSubGroupIDs: Array<number>, selectedBranchIDs: Array<number>) {\r\n    type returnType = { groups: filterSelectType[], subgroups: filterSelectType[], branches: filterSelectType[] };\r\n    let groups: filterSelectType[] = [{ id: 0, name: \"Select Groups\", isSelected: \"false\", selected: false }];\r\n    let subgroups: filterSelectType[] = [{ id: 0, name: \"Select Sub-Groups\", isSelected: \"false\", selected: false }];\r\n    let branches: filterSelectType[] = [{ id: 0, name: \"Select Branches\", isSelected: \"false\", selected: false }];\r\n\r\n    // console.log({\"this._groups\": this._groups, \"this.memberGroups\": this.memberGroups});\r\n    // console.log({\"this._subgroups\": this._subgroups, \"this.memberSubGroups\": this.memberSubGroups});\r\n\r\n\r\n    this._groups.forEach(_group => {\r\n      let thisIsSelected = false;\r\n      selectedGroupIDs.forEach(selectedGroupID => {\r\n        if (selectedGroupID === _group.id) {\r\n          thisIsSelected = true;\r\n        }\r\n      });\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (thisIsSelected) {\r\n        isSelected = true;\r\n        isSelectedAlt = \"true\";\r\n      }\r\n      const group: filterSelectType = {\r\n        id: _group.id, name: _group.group, isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!groups.includes(group)) {\r\n        groups.push(group);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._subgroups\": this._subgroups})\r\n    this._subgroups.forEach(_subgroup => {\r\n      let thisIsSelected = false;\r\n      selectedSubGroupIDs.forEach(selectedSubGroupID => {\r\n        if (selectedSubGroupID === _subgroup.id) {\r\n          thisIsSelected = true;\r\n        }\r\n      });\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (thisIsSelected) {\r\n        isSelected = true;\r\n        isSelectedAlt = \"true\";\r\n      }\r\n      const subgroup: filterSelectType = {\r\n        id: _subgroup.id, name: `${_subgroup.groupID.group} => ${_subgroup.subgroup}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!subgroups.includes(subgroup)) {\r\n        subgroups.push(subgroup);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._branches\": this._branches, selectedBranchIDs})\r\n    this._branches.forEach(_branch => {\r\n      let thisIsSelected = false;\r\n      selectedBranchIDs.forEach(selectedBranchID => {\r\n        if (selectedBranchID === _branch.id) {\r\n          thisIsSelected = true;\r\n        }\r\n      });\r\n\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (thisIsSelected) {\r\n        isSelected = true;\r\n        isSelectedAlt = \"true\";\r\n      }\r\n      const branch: filterSelectType = {\r\n        id: _branch.id, name: `${_branch.name}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!branches.includes(branch)) {\r\n        branches.push(branch);\r\n      }\r\n    });\r\n\r\n    const _returnType: returnType = {\r\n      groups: groups, subgroups: subgroups, branches\r\n    }\r\n    return _returnType;\r\n  }\r\n\r\n  get memberListField() {\r\n    // console.log({ \"this.selectedBranch\": this.selectedBranch });\r\n    if (Number(this.accountType) === 2) {\r\n      return this.organizationMemberList;\r\n    } else {\r\n      return this.organizationMemberList;\r\n    }\r\n  }\r\n\r\n  get organizationMemberList() {\r\n    this.startSearchPage = 0;\r\n\r\n    function processClientUserSearch(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n      params.page = params.page || 0;\r\n      const TOTAL = data.count,\r\n        RESULTS = data.results,\r\n        SELECTOR = document.querySelector('[id=\"filter_memberIds\"]');\r\n      // console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n      let processedData: { id: number; text: string; }[] = [];\r\n      if (TOTAL > 0) {\r\n        var _data = RESULTS;\r\n        // console.log({ \"smbfl-_data\": _data });\r\n        for (let i = 0; i < _data.length; i++) {\r\n          const item = _data[i];\r\n          // console.log({\"typeof\": typeof item, \"item-item\": item });\r\n          const member: MembershipOrganizationUserModel = MouMconvert.toMembershipOrganizationUserModel(JSON.stringify(item));\r\n          // console.log({ \"member-member\": member });\r\n\r\n          const id = member.id;\r\n          const organizationName = `${member.organizationName}`;\r\n          const _new = {\r\n            id: id,\r\n            text: organizationName,\r\n          }\r\n          if (!processedData.includes(_new)) {\r\n            processedData.push(_new)\r\n          }\r\n        }\r\n      }\r\n      // console.log({ processedData });\r\n\r\n      return {\r\n        results: processedData,\r\n        total: TOTAL,\r\n        // @ts-ignore\r\n        totalShowing: SELECTOR.totalShowing,\r\n      };\r\n    }\r\n\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    // const _get_cookie = base64Decode(get_cookie('client_tokenLogin'));\r\n    // console.log({\"this.selectedBranch\": this.selectedBranch});\r\n\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    return html`\r\n      <h4 class=\"font-semibold my-2\">Select Organization</h4>\r\n      <select-input class=\"w-100\" id=\"filter_memberIds\" name=\"filter_memberIds\" label=\"Select Organization\" multiple\r\n        .ajaxFetchProcessResponse=\"${processClientUserSearch}\" startSearchPage=\"${this.startSearchPage}\"\r\n        .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams}\"\r\n        ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user-organization/search\"></select-input>\r\n    `;\r\n  }\r\n\r\n  private get table_header() {\r\n    return html`\r\n      <div class=\"flex-col p-2 mb-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 grid-flow-row gap-4 pb-5\">\r\n        <div\r\n          class=\"rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-col p-2 border-b-2 mb-2\">\r\n          <label class=\"flex justify-between items-center\">\r\n            <b>CHECK ALL: </b>\r\n            <input id=\"verification_info_all\" name=\"verification_info_all\" type=\"checkbox\"\r\n              class=\"rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n              @change=\"${this.check_all_verification}\" />\r\n          </label>\r\n        </div>\r\n        <div\r\n          class=\"rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-col p-2 border-b-2 mb-2\">\r\n          <mwc-button class=\"success\" raised verification_info_all=\"activate\" @click=\"${this.activateMultipleMemberAction}\">\r\n            Activate All Selected</mwc-button>\r\n        </div>\r\n        <div\r\n          class=\"rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-col p-2 border-b-2 mb-2\">\r\n          <mwc-button class=\"danger\" raised verification_info_all=\"deactivate\"\r\n            @click=\"${this.deactivateMultipleMemberAction}\">Deactivate All Selected</mwc-button>\r\n        </div>\r\n        <div\r\n          class=\"rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 flex-col p-2 border-b-2 mb-2\">\r\n          <label class=\"flex justify-between items-center\">\r\n            <b>AUTO VERIFY: </b>\r\n            <input id=\"auto_verification\" name=\"auto_verification\" type=\"checkbox\"\r\n              class=\"rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n              @change=\"${this.check_auto_verification}\" ?checked=\"${this._autoVerifications.length > 0? true: false}\" auto-verification-id=\"${this._autoVerifications.length > 0? this._autoVerifications[0].id: 0}\" />\r\n          </label>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get ajaxFetchUrlParams(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"branchId\", value: String(this.selectedBranch) }\r\n    ]\r\n  }\r\n\r\n  private get __tableHeaders(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Member(s)', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get __tableBody(): DataTables_ColumnSettings_I[][] {\r\n    return [];\r\n  }\r\n\r\n  private get __tableFoot(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Member(s)', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get table(): TemplateResult {\r\n    // const memberType = this._memberType;\r\n    let branchId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      branchId = this._activeBranchId[0].id;\r\n    }\r\n    let URL = CONSTANTS.URLS.AKWAABA_API_BASE_URL + \"members/member-verification/members?branchId=\" + branchId + \"&order__by=firstname&datatable_plugin\";\r\n\r\n    const _urlQueryString = this.urlQueryString;\r\n    // console.log({_urlQueryString});\r\n    URL = URL + _urlQueryString;\r\n    // console.log({URL});\r\n\r\n    const __dataTable = this.__dataTable(URL);\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    return html`\r\n      ${this.table_header}\r\n      <datatables-new .datatable=\"${__dataTable}\" .ajaxHeader=\"${ajaxHeader}\" .dt_body=\"${this.__tableBody}\"\r\n        .dt_foot=\"${this.__tableFoot}\" .dt_head=\"${this.__tableHeaders}\"></datatables-new>\r\n    `;\r\n  }\r\n\r\n  private get urlQueryString() {\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_branchId = \"filter_branchId\",\r\n      filterNameId_filter_search = \"filter_search\",\r\n      filterNameId_filter_memberCategoryId = \"filter_memberCategoryId\",\r\n      filterNameId_filter_groupIds = \"filter_groupIds\",\r\n      filterNameId_filter_subGroupIds = \"filter_subGroupIds\",\r\n      filterNameId_filter_memberIds = \"filter_memberIds\",\r\n      // filterNameId_filter_verificationIds = \"filter_verificationIds\",\r\n      filterNameId_filter_verification = \"filter_verification\";\r\n\r\n    let newObject: any = {};\r\n    // for (const key in _urlQueryParams) {\r\n    //   let value = Number(_urlQueryParams[key]);\r\n    //   if (!Number.isNaN(value) && (value !== 0)) {\r\n    //     // console.log({value, });\r\n\r\n    //     newObject[key] = value;\r\n    //   }\r\n    // }\r\n    let _branchIds: Array<string> = [],\r\n      _memberCategoryIds: Array<string> = [],\r\n      _groupIds: Array<string> = [],\r\n      _subGroupIds: Array<string> = [],\r\n      _memberIds: Array<string> = [];\r\n\r\n    for (const key in _urlQueryParams) {\r\n      let value = String(_urlQueryParams[key]),\r\n        branchId = `${filterNameId_filter_branchId}[]`,\r\n        memberCategoryId = `${filterNameId_filter_memberCategoryId}[]`,\r\n        groupIds = `${filterNameId_filter_groupIds}[]`,\r\n        subGroupIds = `${filterNameId_filter_subGroupIds}[]`,\r\n        memberIds = `${filterNameId_filter_memberIds}[]`;\r\n\r\n      if ((key === branchId) || (key === filterNameId_filter_search)\r\n        || (key === memberCategoryId) || (key === groupIds)\r\n        || (key === subGroupIds) || (key === memberIds)\r\n        || (key === filterNameId_filter_verification)) {\r\n        // console.log({value, });\r\n\r\n        newObject[key] = value;\r\n\r\n        if ((key === branchId) || (key === memberCategoryId)\r\n          || (key === groupIds) || (key === subGroupIds)\r\n          || (key === memberIds)) {\r\n          // console.log({value, });\r\n          _branchIds = urlQueryParamsGetAll(branchId),\r\n            _memberCategoryIds = urlQueryParamsGetAll(memberCategoryId),\r\n            _groupIds = urlQueryParamsGetAll(groupIds),\r\n            _subGroupIds = urlQueryParamsGetAll(subGroupIds),\r\n            _memberIds = urlQueryParamsGetAll(memberIds);\r\n        }\r\n\r\n        if (key === filterNameId_filter_verification) {\r\n          if (value !== \"1\" && value !== \"2\" && value !== \"true\" && value !== \"false\") {\r\n            delete newObject[key]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    newObject[\"filter_accountType\"] = 2;\r\n\r\n\r\n    // console.log({\"newObject-newObject\": newObject});\r\n    let new_params = ``;\r\n    _branchIds.forEach(_branchId => new_params += `&${filterNameId_filter_branchId}=${_branchId}`);\r\n    _memberCategoryIds.forEach(_memberCategoryId => new_params += `&${filterNameId_filter_memberCategoryId}=${_memberCategoryId}`);\r\n    _groupIds.forEach(_groupId => new_params += `&${filterNameId_filter_groupIds}=${_groupId}`);\r\n    _subGroupIds.forEach(_subGroupId => new_params += `&${filterNameId_filter_subGroupIds}=${_subGroupId}`);\r\n    _memberIds.forEach(_memberId => new_params += `&${filterNameId_filter_memberIds}=${_memberId}`);\r\n    \r\n\r\n    // console.log({new_params});\r\n    \r\n\r\n    let _urlQueryParamsJoin = urlQueryParamsJoin(newObject);\r\n\r\n    return (_urlQueryParamsJoin.length === 0)\r\n      ? _urlQueryParamsJoin : \"&\" + _urlQueryParamsJoin + new_params;\r\n  }\r\n\r\n  private rowOneRender(verification: MembershipVerificationModel) {\r\n    verification = mvmConvert.toMembershipVerificationModel(JSON.stringify(verification));\r\n    const member = verification.member;\r\n    const vInfo = verification.verificationInfo;\r\n    // console.log({ data, type, member });\r\n\r\n    let country = '-', region_state_name = \"-\", region_state = \"-\";\r\n    member.countryInfo.forEach(_country => {\r\n      country = _country.name;\r\n\r\n      if (_country.id === 76) {\r\n        region_state_name = \"Region\";\r\n\r\n        region_state = member.regionInfo.location;\r\n      } else {\r\n        region_state_name = \"State/ Province\";\r\n\r\n        region_state = member.stateProvince;\r\n      }\r\n    });\r\n\r\n    // console.log({vInfo});\r\n\r\n    const verification_info_id = verification.verification ? vInfo.memberId : member.id;\r\n\r\n    const ID = base64Encode(String(member.id), true);\r\n    return `<div class=\"flex items-center whitespace-normal mb-0\">\r\n      <input id=\"verification_info\" name=\"verification_info\" type=\"checkbox\" value=\"${verification_info_id}\"\r\n        class=\"rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" />\r\n      <div>\r\n        <user-profile-photo class=\"w-16 h-16 mr-1\" rounded 'click-to-open'=\"\" click-to-open=\"${this.memberProfileBaseUrl}${ID}\" type=\"member\"\r\n          url=\"${member.logo}\" size=\"16\"></user-profile-photo>\r\n        <p class=\"ml-1 mb-2\">\r\n          <b>${member.organizationName}</b>\r\n        </p>\r\n        <p class=\"ml-1 mb-2\">\r\n          Country: ${country}\r\n        </p>\r\n        <p class=\"ml-1 mb-2\">\r\n          ${region_state_name}: ${region_state}\r\n        </p>\r\n        <p class=\"ml-1 mb-2\">\r\n          Branch: ${member.branchInfo.name}\r\n        </p>\r\n        <p class=\"ml-1 mb-2\">\r\n          Contact: <a href=\"tel:${member.organizationPhone}\" type=\"tel\">${member.organizationPhone}</a>\r\n        </p>\r\n        <p class=\"ml-1 mt-3 mb-0\">\r\n          <link-button isblockcontent=\"false\" aClass=\"\" raised bClass=\"button success mr-2\"\r\n            href=\"${this.memberProfileBaseUrl}${ID}\" label=\"View Profile\"></link-button>\r\n        </p>\r\n      </div>\r\n    </div>`;\r\n\r\n  }\r\n\r\n  private rowTwoRender(verification: MembershipVerificationModel) {\r\n    verification = mvmConvert.toMembershipVerificationModel(JSON.stringify(verification));\r\n    const member = verification.member;\r\n    const vInfo = verification.verificationInfo;\r\n\r\n    const name = vInfo === null ? \"-\" : `${vInfo.verifiedBy?.firstname} ${vInfo.verifiedBy?.surname}`,\r\n      date = vInfo === null ? \"-\" : getDate(vInfo.verifiedBy?.date, { dateStyle: \"medium\" }),\r\n      time = vInfo === null ? \"-\" : getLocalTime(vInfo.verifiedBy?.date, { timeStyle: \"short\" });\r\n    return `<div class=\"flex flex-col md:flex-row whitespace-normal\">\r\n      <p class=\"ml-1 mb-2\">\r\n        <b>Verified By: ${name}</b>\r\n      </p>\r\n    </div>\r\n    <div class=\"flex flex-col md:flex-row whitespace-normal\">\r\n      <p class=\"ml-1 mb-2\">\r\n        On: ${date}/ \r\n      </p>\r\n      <p class=\"ml-1 mb-2\">\r\n        At: ${time}\r\n      </p>\r\n    </div>\r\n    <div class=\"flex flex-col md:flex-row whitespace-normal\">\r\n      ${verification.verification ? `<p class=\"ml-1 mb-2\">\r\n        <mwc-button class=\"danger\" raised unverify-member=\"${vInfo.id}\">Deactivate</mwc-button>\r\n      </p>`: `<p class=\"ml-1 mb-2\">\r\n        <mwc-button class=\"success\" raised verify-member=\"${member.id}\">Activate</mwc-button>\r\n      </p>`}\r\n    </div>`;\r\n  }\r\n\r\n  private __dataTable(url: string): DataTables_Settings_I {\r\n    const __this = this;\r\n\r\n    // console.log({ \"projects\": this._questionnaireResponses });\r\n    let dataTable: DataTables_Settings_I = {\r\n      'order': [[0, 'desc']],\r\n      'processing': true,\r\n      'serverSide': true,\r\n      'ajax': {\r\n        url: url,\r\n        dataSrc: 'data',\r\n        apiType: \"akwaabaApp\",\r\n      },\r\n      \"columns\": [\r\n        {\r\n          data: 'member',\r\n          render: (data: any, type: any, member: MembershipVerificationModel) => __this.rowOneRender(member),\r\n          orderable: true\r\n        },\r\n        {\r\n          data: 'verification',\r\n          render: (data: any, type: any, member: MembershipVerificationModel) => __this.rowTwoRender(member),\r\n          orderable: true\r\n        },\r\n\r\n      ],\r\n      'columnDefs': [\r\n        {\r\n          targets: ['_all'],\r\n          className: 'mdc-data-table__cell',\r\n          // @ts-ignore\r\n          checkboxes: {\r\n            selectRow: true\r\n          },\r\n        }\r\n      ],\r\n      'lengthMenu': [10, 25, 50, 100, 500, 1000],\r\n      \"drawCallback\": async function (e) {\r\n        const aoData = e.aoData;\r\n        // console.log({ aoData })\r\n        __this.verifyMemberBtns();\r\n        __this.unVerifyMemberBtns();\r\n      },\r\n      \"responsive\": true,\r\n      \"dom\": 'Blfrtip',\r\n      buttons: [\r\n        'selected',\r\n        'selectedSingle',\r\n        'selectAll',\r\n        'selectNone',\r\n        'selectRows',\r\n        'selectColumns',\r\n        'selectCells',\r\n        'pdf',\r\n        'excel',\r\n        'copy',\r\n        'csv',\r\n      ],\r\n      select: true,\r\n      // \"select\": {\r\n      //   \"style\": \"multi\"\r\n      // },\r\n    };\r\n    return dataTable;\r\n  }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranchModel>();\r\n    let __branches: ClientBranchModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        // @ts-ignore\r\n        const DATA: ClientBranchModel[] = _networkResponse.response.data.map((data: any) => {\r\n          return cbmConvert.toClientBranchModel(JSON.stringify(data));\r\n        });\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<ClientBranchModel> = [];\r\n    new_data.push(...this._branches, ...__branches);\r\n    this._branches = new_data;\r\n  }\r\n\r\n  private async getAutoVerification() {\r\n    const _networkResponse = await GET_MemberVerificationAuto<MembershipAutoVerificationModel>();\r\n    let __autos: MembershipAutoVerificationModel[] = [];\r\n\r\n    if (_networkResponse !== null) {\r\n      if ((_networkResponse.response.success === true)) {\r\n        // @ts-ignore\r\n        const DATA: MembershipAutoVerificationModel[] = _networkResponse.response.data.map((data: any) => {\r\n          return mavmConvert.toMembershipAutoVerificationModel(JSON.stringify(data));\r\n        });\r\n        // console.log({DATA});\r\n        __autos = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<MembershipAutoVerificationModel> = [];\r\n    new_data.push(...this._autoVerifications, ...__autos);\r\n    this._autoVerifications = new_data;\r\n  }\r\n\r\n  private async getGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<any>();\r\n    let __groups: GroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __groups.push({ id: 0, group: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        // console.log({\"_networkResponse.response.data\": _networkResponse.response.data});\r\n\r\n        const DATA: GroupModel[] = _networkResponse.response.data.map((group: any) => gmConvert.toGroupModel(JSON.stringify(group)));\r\n        // console.log({DATA});\r\n        __groups = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<GroupModel> = [];\r\n    new_data.push(...this._groups, ...__groups);\r\n    this._groups = new_data;\r\n  }\r\n\r\n  private async getSubGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsSubGroups<any>();\r\n    let __subgroups: SubGroupModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __subgroups.push({ id: 0, subgroup: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: SubGroupModel[] = _networkResponse.response.data.map((subgroup: any) => sgmConvert.toSubGroupModel(JSON.stringify(subgroup)));\r\n        // console.log({DATA});\r\n        __subgroups = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<SubGroupModel> = [];\r\n    new_data.push(...this._subgroups, ...__subgroups);\r\n    this._subgroups = new_data;\r\n  }\r\n\r\n  private verifyMemberBtns() {\r\n    const selectorString = 'verify-member';\r\n    document.querySelectorAll('[' + selectorString + ']').forEach(verify_member => {\r\n      verify_member.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        this.verifyMemberAction(verify_member, selectorString, e);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  private async verifyMemberAction(element: Element, selectorString: string, e: any) {\r\n    e.preventDefault();\r\n\r\n    const memberID = element.getAttribute(selectorString);\r\n\r\n    if (!Number.isNaN(memberID) && Number(memberID) !== 0) {\r\n      await POST_MemberVerification(Number(memberID));\r\n    }\r\n  }\r\n\r\n  private async check_auto_verification(e: any) {\r\n    e.preventDefault();\r\n\r\n    document.querySelectorAll('[id=\"auto_verification\"][name=\"auto_verification\"]').forEach((input: HTMLInputElement) => {\r\n      if (input.checked) {\r\n        document.querySelectorAll('[id=\"auto_verification\"][name=\"auto_verification\"]').forEach((_input_: HTMLInputElement) => {\r\n          _input_.checked = true;\r\n          POST_MemberVerificationAuto();\r\n        })\r\n      } else {\r\n        document.querySelectorAll('[id=\"auto_verification\"][name=\"auto_verification\"]').forEach((_input_: HTMLInputElement) => {\r\n          _input_.checked = false;\r\n          const autoVerificationId = Number(_input_.getAttribute('auto-verification-id'))\r\n          POST_MemberVerificationAuto(autoVerificationId);\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private async check_all_verification(e: any) {\r\n    e.preventDefault();\r\n\r\n    document.querySelectorAll('[id=\"verification_info_all\"][name=\"verification_info_all\"]').forEach((input: HTMLInputElement) => {\r\n      if (input.checked) {\r\n        document.querySelectorAll('[id=\"verification_info\"][name=\"verification_info\"]').forEach((_input_: HTMLInputElement) => {\r\n          _input_.checked = true;\r\n        })\r\n      } else {\r\n        document.querySelectorAll('[id=\"verification_info\"][name=\"verification_info\"]').forEach((_input_: HTMLInputElement) => {\r\n          _input_.checked = false;\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private async activateMultipleMemberAction(e: any) {\r\n    e.preventDefault();\r\n\r\n    let ids: Array<number> = [];\r\n\r\n    document.querySelectorAll('[id=\"verification_info\"][name=\"verification_info\"]').forEach((input: HTMLInputElement) => {\r\n      if (input.checked) {\r\n        if (!Number.isNaN(input.value)) {\r\n          const value = Number(input.value);\r\n          if (!ids.includes(value)) {\r\n            ids.push(value)\r\n          }\r\n        }\r\n      }\r\n    })\r\n    await POST_MemberVerificationBulk(ids);\r\n  }\r\n\r\n  private unVerifyMemberBtns() {\r\n    const selectorString = 'unverify-member';\r\n    document.querySelectorAll('[' + selectorString + ']').forEach(unverify_member => {\r\n      unverify_member.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        this.unVerifyMemberAction(unverify_member, selectorString, e);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  private async unVerifyMemberAction(element: Element, selectorString: string, e: any) {\r\n    e.preventDefault();\r\n\r\n    const memberID = element.getAttribute(selectorString);\r\n\r\n    if (!Number.isNaN(memberID) && Number(memberID) !== 0) {\r\n      await DELETE_MemberVerification(Number(memberID));\r\n    }\r\n  }\r\n\r\n  private async deactivateMultipleMemberAction(e: any) {\r\n    e.preventDefault();\r\n\r\n    let ids: Array<number> = [];\r\n\r\n    document.querySelectorAll('[id=\"verification_info\"][name=\"verification_info\"]').forEach((input: HTMLInputElement) => {\r\n      if (input.checked) {\r\n        if (!Number.isNaN(input.value)) {\r\n          const value = Number(input.value);\r\n          if (!ids.includes(value)) {\r\n            ids.push(value)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    await DELETE_MemberVerificationBulk(ids);\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","PdbMembershipOrganizationVerification","LitElement","constructor","super","memberProfileBaseUrl","_groups","_subgroups","_branches","_autoVerifications","startSearchPage","accountType","selectedBranch","_activeBranchId","_memberType","_hasSetup","_selectedMembersCalled","_selectedMembersNames","_userLoginInfo","connectedCallback","AppSetup","then","this","activeBranchId","getActiveBranchIdCookie","getUserLoginInfoCookie","length","user","branchId","filterBox","FilterFieldBox","selectors","container","filterSectionContextContainer","form","filterSectionContextForm","filterSectionContextBtn","getAutoVerification","getBranches","getGroups","getSubGroups","disconnectedCallback","render","getAppSettingsExtraSettings","expiration_date","expired","html","AppSettingsExtraUserAccess","pageId","PAGE__IDS","viewType","toggleFilterFields","filterForm","table","firstUpdated","returnHtml","_urlQueryParams","urlQueryParams","filterNameId_filter_branchId","filterNameId_filter_search","filterNameId_filter_memberCategoryId","filterNameId_filter_groupIds","filterNameId_filter_subGroupIds","filterNameId_filter_memberIds","filterNameId_filter_verification","filterNameId_filter_branchIdVal","filterNameId_filter_searchVal","filterNameId_filter_memberCategoryIdVal","filterNameId_filter_groupIdsVal","filterNameId_filter_subGroupIdsVal","filterNameId_filter_memberIdsVal","filterNameId_filter_verificationVal","key","value","String","urlQueryParamsGetAll","searchField","userBranch","selectedGroupIDs","Array","isArray","map","item","Number","isNaN","selectedSubGroupIDs","selectedBranchIDs","groupsSubgroupsBranches","branchField","branches","verificationField","memberCategoryIDs","memberCategoryField","groupField","groups","subGroupField","subgroups","memberListField","until","getMembersByIds","memberId","clear_filter","submit","memberIds","_members","_networkResponse","GET_MembershipUserIds","response","success","_DATAS","data","results","member","JSON","stringify","organizationName","branchChange","e","currentTarget","id","name","isSelected","selected","forEach","_group","thisIsSelected","selectedGroupID","isSelectedAlt","group","includes","push","_subgroup","selectedSubGroupID","subgroup","groupID","_branch","selectedBranchID","branch","organizationMemberList","ajaxHeader","_get_cookie","Authorization","token","params","page","TOTAL","count","RESULTS","SELECTOR","document","querySelector","processedData","_data","i","_new","text","total","totalShowing","ajaxFetchUrlParams","CONSTANTS","table_header","check_all_verification","activateMultipleMemberAction","deactivateMultipleMemberAction","check_auto_verification","param","__tableHeaders","title","__tableBody","__tableFoot","URL","urlQueryString","__dataTable","newObject","_branchIds","_memberCategoryIds","_groupIds","_subGroupIds","_memberIds","memberCategoryId","groupIds","subGroupIds","new_params","_branchId","_memberCategoryId","_groupId","_subGroupId","_memberId","_urlQueryParamsJoin","urlQueryParamsJoin","rowOneRender","verification","vInfo","verificationInfo","country","region_state_name","region_state","countryInfo","_country","regionInfo","location","stateProvince","verification_info_id","ID","base64Encode","logo","branchInfo","organizationPhone","rowTwoRender","verifiedBy","firstname","surname","getDate","date","dateStyle","getLocalTime","timeStyle","url","__this","dataSrc","apiType","type","orderable","targets","className","checkboxes","selectRow","aoData","verifyMemberBtns","unVerifyMemberBtns","buttons","select","GET_ClientBranches","__branches","new_data","GET_MemberVerificationAuto","__autos","GET_MemberGroupingsGroups","__groups","Date","GET_MemberGroupingsSubGroups","__subgroups","selectorString","querySelectorAll","verify_member","addEventListener","preventDefault","verifyMemberAction","element","memberID","getAttribute","POST_MemberVerification","input","checked","_input_","POST_MemberVerificationAuto","autoVerificationId","ids","POST_MemberVerificationBulk","unverify_member","unVerifyMemberAction","DELETE_MemberVerification","DELETE_MemberVerificationBulk","createRenderRoot","styles","css","query","Button","Element","HTMLFormElement","property","Boolean","customElement"],"sourceRoot":""}