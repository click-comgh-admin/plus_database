{"version":3,"file":"../../production_public/assets/v2/dev-files/js/membership/groupings/group_subgroup/groups/add-bulk.js","mappings":"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","sources":["webpack://webpackNumbers/webpack/universalModuleDefinition","webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/network/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/group/group/post_bulk.ts","webpack://webpackNumbers/./src/view/membership/groupings/group_subgroup/groups/add-bulk.ts","webpack://webpackNumbers/./src/view/membership/groupings/page__id.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"webpackNumbers\"] = factory();\n\telse\n\t\troot[\"webpackNumbers\"] = factory();\n})(self, () => {\nreturn ","export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientBranches<Type>(type: Number = null) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/branch'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_GroupingsGroupBulk(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group/bulk',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"members-groupings-group\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Create Multiple Group(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import \"@@assets/styles/views/admin/register/main.scss\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport '@material/mwc-icon';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-textarea';\r\nimport '@@addons/widgets/form/new/select';\r\nimport '../../../members/select-member-type';\r\nimport { UserLoginInfo_I } from \"@@addons/interfaces/network_calls/login\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { getActiveBranchIdCookie } from \"@@addons/functions/views/home/branch\";\r\nimport { ClientBranches_I, ClientBranchShort_I } from \"@@addons/interfaces/clients/branches\";\r\nimport { GroupingsMemberCategories_I } from \"@@addons/interfaces/members/groupings/member_categories\";\r\nimport { GET_ClientBranches } from \"@@addons/network/clients/branches\";\r\nimport { GET_MemberGroupingsMemberCategories } from \"@@addons/network/members/groupings/member_categories\";\r\nimport { POST_GroupingsGroupBulk } from \"@@addons/network/members/groupings/group/group/post_bulk\";\r\nimport '@@views/no_access/account_expired';\r\nimport '@@views/no_access/no_page_entry';\r\nimport { AppSetup } from \"@@addons/functions/app_settings\";\r\nimport { getAppSettingsExtraSettings } from \"@@addons/functions/app_settings/extra_settings\";\r\nimport { AppSettingsExtraUserAccess } from \"@@addons/functions/app_settings/extra_settings/user_access\";\r\nimport { PAGE__IDS } from \"../../page__id\";\r\n\r\n\r\n@customElement(\"membership-groupings-group_subgroup-group-add-bulk\")\r\nexport class MembershipGroupingsGroupSubgroupGroupAddBulk extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private accountType: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private selectedBranch: number = 1;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _memberCategories: GroupingsMemberCategories_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _branches: ClientBranches_I[] = [];\r\n\r\n  @property({ type: Boolean })\r\n  private _hasSetup: boolean = false;\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    AppSetup().then(() => this._hasSetup = true);\r\n\r\n    const activeBranchId = getActiveBranchIdCookie();\r\n    this._activeBranchId = (activeBranchId === null) ? null : [activeBranchId];\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    if (this._userLoginInfo !== null) {\r\n      if (this._userLoginInfo.length > 0) {\r\n        this.accountType = 1;\r\n        this.selectedBranch = this._userLoginInfo[0].user.branchId;\r\n        // console.log({ \"this.selectedBranch\": this.selectedBranch });\r\n        setTimeout(() => {\r\n          this.accountType = 0\r\n          // console.log({ \"this.accountType-2\": this.accountType });\r\n        }, 1000);\r\n        // console.log({ \"this.accountType-1\": this.accountType });\r\n        \r\n      }\r\n    }\r\n\r\n    await this.getBranches();\r\n    await this.getClientMemberCategories();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    if (this._hasSetup) {\r\n      if (getAppSettingsExtraSettings()?.expiration_date.expired) {\r\n        return html`<account-expired-component></account-expired-component>`;\r\n      }\r\n      if (!AppSettingsExtraUserAccess({pageId: PAGE__IDS.grouping, viewType: \"Edit\"}, false)) {\r\n        return html`<no-page-entry-component></no-page-entry-component>`;\r\n      }\r\n    }\r\n    let userBranch = 0;\r\n    if (this._userLoginInfo !== null) {\r\n      if (this._userLoginInfo.length > 0) {\r\n        userBranch = this._userLoginInfo[0].user.branchId;\r\n      }\r\n    }\r\n    return html`\r\n      <div class=\"shadow bg-white p-2\">\r\n        <div class=\"form-container flex justify-center\">\r\n          <div class=\"app-container- !px-0\">\r\n            <div class=\"app-container--row !px-0\">\r\n              <div class=\"app-container--col-md-12\">\r\n                <header class=\"header warning app-container--col-md-12\">\r\n                  <label for=\"\" class=\"label\">\r\n                    <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                    <h1 class=\"h1 !text-red-400\">New Group</h1>\r\n                    <h3 class=\"h3\">Create Group!</h3>\r\n                  </label>\r\n                </header>\r\n                <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"members-groupings-group\" enctype=\"multipart/form-data\">\r\n                  <div class=\"row justify-content-center\">\r\n                    <div class=\"col-md-6 col-lg-6\">\r\n                      <h4 class=\"font-semibold my-2\">Select Branch</h4>\r\n                      <mwc-select class=\"w-full\" setSelectedBranchId label=\"Select Branch\"\r\n                        name=\"branchId\" id=\"branchId\" @change=\"${this.branchChange}\" outlined required>\r\n                        ${userBranch === 1 ? html`\r\n                          <mwc-list-item value=\"0\">Select Branch</mwc-list-item>\r\n                          ${this._branches.map((value) => {\r\n                              if (userBranch === value.id) {\r\n                                return html`<mwc-list-item value=\"${value.id}\" selected>${value.name}</mwc-list-item>`;\r\n                              } else {\r\n                                return html`<mwc-list-item value=\"${value.id}\">${value.name}</mwc-list-item>`;\r\n                              }\r\n                          })}\r\n                        `: html`\r\n                          ${this._branches.map((value) => {\r\n                            if (value.id === userBranch) {\r\n                              return html`<mwc-list-item value=\"${value.id}\" selected>${value.name}</mwc-list-item>`;\r\n                            }\r\n                          })}\r\n                        `}\r\n                      </mwc-select>\r\n                    </div>\r\n                    <div class=\"col-md-6 col-lg-6\">\r\n                      <h4 class=\"font-semibold my-2\">Member Category</h4>\r\n                      <pdb-membership-select-member-type defaultValue=\"1\" \r\n                        name=\"memberCategoryId\" id=\"memberCategoryId\"\r\n                        label=\"Select Member Category\" outlined required>\r\n                      </pdb-membership-select-member-type>\r\n                    </div>\r\n                    <div class=\"col-md-6 col-lg-6\">\r\n                      <h4 class=\"font-semibold my-2\">Group(s) - <span class=\"text-red-600\">Separated by commas</span></h4>\r\n                      <mwc-textarea name=\"_groups_\" id=\"_groups_\" label=\"Enter Group(s) - Separated by commas\"\r\n                        outlined required @keyup=\"${this.groups_to_select_options}\" @change=\"${this.groups_to_select_options}\">\r\n                      </mwc-textarea>\r\n                      <select name=\"groups[]\" id=\"groups\" hidden multiple></select>\r\n                    </div>\r\n                  </div>\r\n        \r\n                  <div class=\"form-input-container\">\r\n                    <mwc-button label=\"Create\" raised class=\"w-full\" @click=\"${this.submitForm}\">\r\n                    </mwc-button>\r\n                  </div>\r\n                \r\n                  <div class=\"flex form-input-container items-center text-center\">\r\n                    <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                      ...\r\n                    </label>\r\n                    <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  branchChange(e: Event) {\r\n    // @ts-ignore\r\n    this.selectedBranch = Number.isNaN(e.currentTarget.value)? 0: Number(e.currentTarget.value);\r\n    // console.log({ \"this.selectedBranch\": this.selectedBranch });\r\n  }\r\n\r\n  groups_to_select_options(e: Event) {\r\n    // @ts-ignore\r\n    const groups_txt = String(e.currentTarget.value);\r\n    const groupsFields = document.querySelectorAll('[name=\"groups[]\"][id=\"groups\"]');\r\n    // console.log({\"groups_txt-groups_txt\": groups_txt, \"groupsFields-groupsFields\": groupsFields});\r\n\r\n    groupsFields.forEach(groupsField => {\r\n      let groups: Array<String> = []\r\n      groups_txt.split(',').forEach(_group => {\r\n        const group = _group.trim().split(\",\").join(\"\");\r\n        if (group.length > 0 && group !== \"\" && group !== \" \") {\r\n          // console.log({\"_group-_group\": _group, \"group-group\": group});\r\n          if (!groups.includes(group)) {\r\n            groups.push(group);\r\n          }\r\n        }\r\n      });\r\n\r\n      // @ts-ignore\r\n      groupsField.innerHTML = groups.map(group => {\r\n        return \"<option selected>\"+group+\"</option>\";\r\n      })\r\n    });\r\n    \r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranches_I>();\r\n    let __branches: ClientBranches_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: ClientBranches_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<ClientBranches_I> = [];\r\n    new_data.push(...this._branches, ...__branches);\r\n    this._branches = new_data;\r\n  }\r\n  \r\n  private async getClientMemberCategories() {\r\n    const _networkResponse = await GET_MemberGroupingsMemberCategories<GroupingsMemberCategories_I>();\r\n    let __memberCategories: GroupingsMemberCategories_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __memberCategories.push({ id: 0, category: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsMemberCategories_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __memberCategories = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<GroupingsMemberCategories_I> = [];\r\n    new_data.push(...this._memberCategories, ...__memberCategories);\r\n    this._memberCategories = new_data;\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n    await POST_GroupingsGroupBulk();\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","export const PAGE__IDS = {\r\n  \"grouping\": 33,\r\n  \"assignment\": 34,\r\n};"],"names":["root","factory","exports","module","define","amd","self","__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","GET_ClientBranches","type","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","token","NetWorkCallResponses","console","errorHttp","POST_GroupingsGroupBulk","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","body","then","networkCallRes","_RESPONSE","response","unknownError","length","errors","e","err","errormsg","id","push","res","catch","String","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","MembershipGroupingsGroupSubgroupGroupAddBulk","LitElement","constructor","super","startSearchPage","accountType","selectedBranch","_userLoginInfo","_activeBranchId","_memberCategories","_branches","_hasSetup","connectedCallback","AppSetup","this","activeBranchId","getActiveBranchIdCookie","user","branchId","getBranches","getClientMemberCategories","disconnectedCallback","render","getAppSettingsExtraSettings","expiration_date","expired","html","AppSettingsExtraUserAccess","pageId","PAGE__IDS","viewType","userBranch","branchChange","map","name","groups_to_select_options","submitForm","Number","isNaN","currentTarget","groups_txt","querySelectorAll","groupsField","groups","split","_group","group","trim","join","includes","innerHTML","firstUpdated","_networkResponse","__branches","new_data","GET_MemberGroupingsMemberCategories","__memberCategories","category","preventDefault","createRenderRoot","styles","css","property","Boolean","customElement"],"sourceRoot":""}