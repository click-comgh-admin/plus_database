{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_view_additional-registration_creator_edit_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/network/additional_registration/index.ts","webpack://webpackNumbers/./src/addons/network/additional_registration/patch.ts","webpack://webpackNumbers/./src/view/additional-registration/creator/edit.ts"],"sourcesContent":["import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_AdditionalRegistrationQuestion<Type>(ID: Number = null, url_params: string = \"\",) {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/additonal-registration/questions'\r\n    + (ID === null ? \"/\" : \"/\" + ID) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { AdditionalRegistrationOnlyModel } from \"@@addons/interfaces/additional_registration\";\r\n\r\n\r\nexport async function PATCH_AdditionalRegistrationQuestion(ID: Number, question: AdditionalRegistrationOnlyModel): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/additonal-registration/questions/' + ID,\r\n    formData = {\r\n      \"branchId\": question.branchId,\r\n      \"memberCategoryId\": question.memberCategoryId,\r\n      \"question\": question.question,\r\n      \"type\": question.type,\r\n      \"placeholderInstruction\": question.placeholderInstruction\r\n    };\r\n\r\n  return Swal.fire({\r\n    title: 'Update Question?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, true, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import '@@assets/styles/views/widget/simple-table/main.scss';\r\nimport '@@assets/styles/views/attendance/setup/form.scss';\r\nimport '@@views/no_access/account_expired';\r\nimport '@@views/no_access/no_page_entry';\r\nimport { LitElement, html, css, TemplateResult } from 'lit';\r\nimport { customElement, property, query, queryAll } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon-button';\r\nimport '@material/mwc-circular-progress';\r\nimport '@@widgets/datatables';\r\nimport '@@interfaces/datatables';\r\nimport '@material/mwc-dialog';\r\nimport { urlQueryParams, urlQueryParamsGet } from '@@addons/functions/url_query_params';\r\nimport '@@addons/widgets/form/new/select';\r\nimport { PATCH_AdditionalRegistrationQuestion } from '@@addons/network/additional_registration/patch';\r\nimport './form/inputs';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { base64Decode } from '@@addons/functions/base64';\r\nimport { GET_ClientBranches } from '@@addons/network/clients/branches';\r\nimport { ClientBranches_I, ClientBranchShort_I } from '@@addons/interfaces/clients/branches';\r\nimport { UserLoginInfo_I } from '@@addons/interfaces/network_calls/login';\r\nimport { GroupingsMemberCategories_I } from '@@addons/interfaces/members/groupings/member_categories';\r\nimport { GET_MemberGroupingsMemberCategories } from '@@addons/network/members/groupings/member_categories';\r\nimport { GET_AdditionalRegistrationQuestionType } from '@@addons/network/additional_registration/types';\r\nimport { GET_AdditionalRegistrationQuestion } from '@@addons/network/additional_registration';\r\nimport { AdditionalRegistrationModel, Convert as armConvert, AdditionalRegistrationQuestionTypeModel, AdditionalRegistrationOnlyModel } from '@@addons/interfaces/additional_registration';\r\n\r\n\r\n@customElement(\"additional-registration-creator-edit\")\r\nexport class AdditionalRegistrationCreatorEdit extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public CLIENT_ID: number = 0;\r\n\r\n  private questionData?: AdditionalRegistrationModel = undefined;\r\n\r\n  @property({ type: Array })\r\n  public _data?: Array<string> = [];\r\n\r\n  @property({ type: Object })\r\n  private urlQueryParams?: { [k: string]: string; } = undefined;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  @property({ type: Number })\r\n  private selectedBranchId: number = 0;\r\n\r\n  @property({ type: Array })\r\n  private _branches: ClientBranches_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _memberCategories: GroupingsMemberCategories_I[] = [];\r\n\r\n  @property({ type: Number })\r\n  private userBranch?: number;\r\n\r\n  @property({ type: Array })\r\n  public _arQuestionType: Array<AdditionalRegistrationQuestionTypeModel> = [];\r\n\r\n  @property({ type: Number })\r\n  private questionID?: number = 0;\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    this.urlQueryParams = urlQueryParams();\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    this.getQuestionId();\r\n    await this.getAdditionalRegistrationQuestion();\r\n    await this.getBranches();\r\n    await this.getMemberCategories();\r\n    await this.getAdditionalRegistrationQuestionType();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    this.userBranch = 0;\r\n    if (this._userLoginInfo !== null) {\r\n      if (this._userLoginInfo.length > 0) {\r\n        this.userBranch = this._userLoginInfo[0].user.branchId;\r\n      }\r\n    }\r\n\r\n    console.log({\"this.questionData--this.questionData\": this.questionData})\r\n\r\n    if (this.questionData === undefined) {\r\n      return html`\r\n        <div class=\"shadow bg-white p-2 my-2\">\r\n          <div class=\"main-container\">\r\n            <div class=\"flex justify-center\">\r\n              <mwc-circular-progress indeterminate></mwc-circular-progress>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    if (this.questionData === null) {\r\n      return html`\r\n        <div class=\"shadow bg-white p-2 my-2\">\r\n          <div class=\"main-container\">\r\n            <div class=\"flex justify-center\">\r\n              <h4 class=\"text-red-600 text-lg\">\r\n                <span class=\"font-bold\">Error </span>: Question Not Found!</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    return html`\r\n      <div class=\"shadow bg-white p-2 my-2\">\r\n        <div class=\"main-container\">\r\n          ${this.form}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get form() {\r\n    return html`\r\n      <div class=\"form-container\">\r\n        <div class=\" !px-0\">\r\n          <div class=\"-row !px-0\">\r\n            <div class=\"-col-md-12\">\r\n              <header class=\"header warning -col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Update Additional Registration Question</h1>\r\n                  <h3 class=\"h3\">Edit Additional Registration Question!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form mt-0\" make-general-posts=\"edit-schedule-question\">\r\n                <question-inputs-component id=\"${this.questionID}\" question-inputs-component--object=\"1\" .questionData=\"${[this.questionData]}\"\r\n                  .branches=\"${this._branches}\" .memberCategories=\"${this._memberCategories}\" userBranch=\"${this.userBranch}\" \r\n                  .arQuestionType=\"${this._arQuestionType}\"></question-inputs-component>\r\n                <div class=\"row justify-content-center\">\r\n                  <div class=\"col-md-12 col-lg-12\">\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Submit Question\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n\r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n      \r\n      const questionInputsComponent = document.querySelector(`question-inputs-component[id=\"${this.questionID}\"]`);\r\n      const question: AdditionalRegistrationOnlyModel = {\r\n        // @ts-ignore\r\n        branchId: questionInputsComponent.branchIdValue,\r\n        // @ts-ignore\r\n        memberCategoryId: questionInputsComponent.memberCategoryIdValue,\r\n        // @ts-ignore\r\n        question: questionInputsComponent.questionValue,\r\n        // @ts-ignore\r\n        type: questionInputsComponent.typeValue,\r\n        // @ts-ignore\r\n        placeholderInstruction: questionInputsComponent.placeholderInstructionValue,\r\n      };\r\n      console.log({questionInputsComponent, question})\r\n      await PATCH_AdditionalRegistrationQuestion(this.questionID, question);\r\n  }\r\n\r\n  private getQuestionId() {\r\n    let questionID = urlQueryParamsGet('question');\r\n    let _questionID = base64Decode(questionID !== null ? String(questionID) : \"\");\r\n    this.questionID = Number.isNaN(_questionID) ? null : Number(_questionID);\r\n    // console.log({ \"this.urlQueryParams\": this.urlQueryParams, \"this.questionID\": this.questionID });\r\n  }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranches_I>();\r\n    let __branches: ClientBranches_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: ClientBranches_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<ClientBranches_I> = [];\r\n    new_data.push(...this._branches, ...__branches);\r\n    this._branches = new_data;\r\n  }\r\n\r\n  private async getMemberCategories() {\r\n    const _networkResponse = await GET_MemberGroupingsMemberCategories<GroupingsMemberCategories_I>();\r\n    let __memberCategories: GroupingsMemberCategories_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __memberCategories.push({ id: 0, category: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsMemberCategories_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __memberCategories = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<GroupingsMemberCategories_I> = [];\r\n    new_data.push(...this._memberCategories, ...__memberCategories);\r\n    this._memberCategories = new_data;\r\n  }\r\n\r\n  private async getAdditionalRegistrationQuestion() {\r\n    const _networkResponse = await GET_AdditionalRegistrationQuestion<AdditionalRegistrationModel>(this.questionID);\r\n    let _question: AdditionalRegistrationModel = null;\r\n\r\n    if (_networkResponse === null) {\r\n      _question = null;\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('question' in _networkResponse.response.data)) {\r\n        const question: AdditionalRegistrationModel = armConvert.toAdditionalRegistrationModel(JSON.stringify(_networkResponse.response.data));\r\n        console.log({question});\r\n        _question = question;\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.questionData = _question;\r\n    }, 100);\r\n  }\r\n\r\n  private async getAdditionalRegistrationQuestionType() {\r\n    const _networkResponse = await GET_AdditionalRegistrationQuestionType<AdditionalRegistrationQuestionTypeModel>();\r\n    let __arQuestionType: AdditionalRegistrationQuestionTypeModel[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __arQuestionType.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: AdditionalRegistrationQuestionTypeModel[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __arQuestionType = DATA;\r\n      }\r\n    }\r\n    const new_data: Array<AdditionalRegistrationQuestionTypeModel> = [];\r\n    new_data.push(...this._arQuestionType, ...__arQuestionType);\r\n    this._arQuestionType = new_data;\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["GET_AdditionalRegistrationQuestion","ID","url_params","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","token","NetWorkCallResponses","error","console","errorHttp","PATCH_AdditionalRegistrationQuestion","question","formData","branchId","memberCategoryId","type","placeholderInstruction","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","body","JSON","stringify","then","networkCallRes","_RESPONSE","response","unknownError","length","errors","forEach","e","err","errormsg","id","push","res","https_swal_error_format","catch","String","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","AdditionalRegistrationCreatorEdit","LitElement","constructor","super","CLIENT_ID","questionData","undefined","_data","urlQueryParams","_userLoginInfo","selectedBranchId","_branches","_activeBranchId","_memberCategories","_arQuestionType","questionID","connectedCallback","this","getQuestionId","getAdditionalRegistrationQuestion","getBranches","getMemberCategories","getAdditionalRegistrationQuestionType","disconnectedCallback","render","userBranch","user","log","html","form","submitForm","firstUpdated","preventDefault","questionInputsComponent","document","querySelector","branchIdValue","memberCategoryIdValue","questionValue","typeValue","placeholderInstructionValue","urlQueryParamsGet","_questionID","base64Decode","Number","isNaN","_networkResponse","GET_ClientBranches","__branches","name","data","new_data","GET_MemberGroupingsMemberCategories","__memberCategories","category","_question","GET_AdditionalRegistrationQuestionType","__arQuestionType","createRenderRoot","styles","css","property","Array","customElement"],"sourceRoot":""}