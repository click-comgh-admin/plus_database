{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_view_membership_connections_page__id_ts-src_view_membership_connections_types_add_ts-src_-506c4e.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/interfaces/members/connections/types.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/delete.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/index.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/post.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/put.ts","webpack://webpackNumbers/./src/view/membership/connections/page__id.ts","webpack://webpackNumbers/./src/view/membership/connections/types/add.ts","webpack://webpackNumbers/./src/view/membership/connections/types/edit.ts","webpack://webpackNumbers/./src/view/membership/connections/types/view.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","export interface UserConnectionType_I {\r\n  id?: number,\r\n  clientId?: number,\r\n  type?: string,\r\n  description?: string,\r\n  lastUpdatedBy?: number,\r\n  lastUpdateDate?: Date,\r\n  createdBy?: number,\r\n  creationDate?: Date,\r\n}\r\n\r\nexport function UserConnectionType_S(data: any): UserConnectionType_I {\r\n  // console.log({data});\r\n\r\n  const userConnectionType_S: UserConnectionType_I = {\r\n    id: Number(data['id']),\r\n    type: String(data['type']),\r\n    clientId: Number(data['clientId']),\r\n    description: String(data['description']),\r\n    createdBy: Number(data['createdBy']),\r\n    creationDate: new Date(data['creationDate']),\r\n    lastUpdatedBy: Number(data['lastUpdatedBy']),\r\n    lastUpdateDate: new Date(data['lastUpdateDate']),\r\n  };\r\n\r\n  return userConnectionType_S;\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function DELETE_UserConnectionType(ID: Number,): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type/' + ID,\r\n    formData = {};\r\n\r\n  return Swal.fire({\r\n    title: 'Remove Connection Type?',\r\n    text: \"You may have members assigned to this connection type. Proceed with care!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n          method: \"DELETE\",\r\n          body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        try {\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", HTTP, false);\r\n          const _RESPONSE = networkCallRes.response;\r\n          if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n            if (_RESPONSE.unknownError.length > 0) {\r\n              // console.log({\"_RESPONSE.unknownError\": _RESPONSE.unknownError});\r\n\r\n              let errors: Array<{ error: string }> = [];\r\n              _RESPONSE.unknownError.forEach(e => {\r\n                const _errors = e.errors;\r\n                _errors.forEach(err => {\r\n                  errors.push({ error: err });\r\n                });\r\n              });\r\n\r\n              const res = https_swal_error_format(errors);\r\n              Swal.showValidationMessage(\r\n                `${res}`\r\n              );\r\n            }\r\n          }\r\n          return networkCallRes;\r\n        } catch (error) {\r\n          console.error({ error });\r\n          let errorHttp = HTTP;\r\n          errorHttp['error'] = error;\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", errorHttp, true);\r\n          networkCallRes.postForm\r\n          return networkCallRes;\r\n        }\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess? 'success': 'error',\r\n        iconColor: '#f97817',\r\n        confirmButtonColor: '#f97817',\r\n      });\r\n      isSuccess? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500): null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_UserConnectionType<Type>(type: Number = null) {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_UserConnectionType(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"user-connection-type\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add Connection Type?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { Dialog } from \"@material/mwc-dialog\";\r\n\r\nexport async function PUT_UserConnectionType(ID: Number, dialog: Dialog): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"user-connection-type-' + ID + '\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update Connection Type?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n        return false;\r\n      });\r\n    }, didClose() {\r\n      dialog.setAttribute('open', \"true\");\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : dialog.setAttribute('open', \"true\");\r\n    }\r\n  });\r\n}","export const PAGE__IDS = {\r\n  \"user_connections\": 56,\r\n  \"connection_types\": 57,\r\n};","import '@@assets/styles/views/attendance/setup/form.scss';\r\nimport { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport \"@material/mwc-button\";\r\nimport \"@material/mwc-textarea\";\r\nimport \"@material/mwc-textfield\";\r\nimport { POST_UserConnectionType } from '@@addons/network/members/connections/types/post';\r\n\r\n\r\n@customElement(\"pdb-connections-types-add\")\r\nexport class PdbConnectionsTypesAdd extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Boolean })\r\n  private showing?: boolean = false;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      ${this.show_form}\r\n      ${/** this.toggle_showing_button */ \"\" }\r\n    `;\r\n  }\r\n\r\n  private get show_form() {\r\n    // if (this.showing) {\r\n      return html`\r\n        <div class=\"z-50\">\r\n          <div class=\"form-container\">\r\n            <div class=\" !px-0\">\r\n              <div class=\"-row !px-0\">\r\n                <div class=\"-col-md-12\">\r\n                  <header class=\"header warning -col-md-12\">\r\n                    <label for=\"\" class=\"label\">\r\n                      <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                      <h1 class=\"h1 !text-red-400\">New Connection Type</h1>\r\n                      <h3 class=\"h3\">Create New Connection Type!</h3>\r\n                    </label>\r\n                  </header>\r\n                  <form method=\"post\" action=\"#\" class=\"form mt-0\" make-general-posts=\"user-connection-type\">\r\n                    <div class=\"container my-4\">\r\n                      <div class=\"row justify-center\">\r\n                        <div class=\"col-md-8 col-lg-8\">\r\n                          <h4 class=\"font-semibold my-2\">Enter Type</h4>\r\n                          <mwc-textfield name=\"type\" type=\"text\" class=\"w-full\" id=\"type\" value=\"\" label=\"Enter Type\" outlined\r\n                            required>\r\n                          </mwc-textfield>\r\n                        </div>\r\n                        <div class=\"col-md-8 col-lg-8\">\r\n                          <h4 class=\"font-semibold my-2\">Enter Description</h4>\r\n                          <mwc-textarea name=\"description\" type=\"text\" class=\"w-full h-24\" id=\"description\" value=\"\"\r\n                            label=\"Enter Description\" outlined required>\r\n                          </mwc-textarea>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row justify-content-center\">\r\n                      <div class=\"col-md-12 col-lg-12\">\r\n                        <div class=\"form-input-container\">\r\n                          <mwc-button label=\"Add Connection Type\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                          </mwc-button>\r\n                        </div>\r\n        \r\n                        <div class=\"flex form-input-container items-center text-center\">\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                          <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                            Lets go digital...\r\n                          </label>\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    // } else {\r\n    //   return nothing;\r\n    // }\r\n  }\r\n\r\n  // private get toggle_showing_button() {\r\n  //   if (this.showing) {\r\n  //     return html`\r\n  //       <mwc-button @click=\"${this.toggle_showing_button_action_hide}\" class=\"button warning\" raised label=\"Hide Add Form\">\r\n  //       </mwc-button>\r\n  //     `;\r\n  //   } else {\r\n  //     return html`\r\n  //       <mwc-button @click=\"${this.toggle_showing_button_action_show}\" class=\"button success\" raised label=\"Show Add Form\">\r\n  //       </mwc-button>\r\n  //     `;\r\n  //   }\r\n  // }\r\n\r\n  // private toggle_showing_button_action_show(e: any) {\r\n  //   e.preventDefault();\r\n  //   this.showing = true;\r\n  // }\r\n\r\n  // private toggle_showing_button_action_hide(e: any) {\r\n  //   e.preventDefault();\r\n  //   this.showing = false;\r\n  // }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n    await POST_UserConnectionType();\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport \"@material/mwc-button\";\r\nimport \"@material/mwc-textarea\";\r\nimport \"@material/mwc-textfield\";\r\nimport '@material/mwc-dialog';\r\nimport { PUT_UserConnectionType } from '@@addons/network/members/connections/types/put';\r\nimport { Dialog } from '@material/mwc-dialog';\r\n\r\n\r\n@customElement(\"pdb-connections-types-edit\")\r\nexport class PdbConnectionsTypesEdit extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public connection_type_id?: number = 0;\r\n\r\n  @property({ type: String })\r\n  public connection_type?: string = \"\";\r\n\r\n  @property({ type: String })\r\n  public connection_description?: string = \"\";\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      <mwc-button class=\"button warning my-1\" outlined open-dialog-btn=\"connection-type-update-${this.connection_type_id}\" @click=\"${this.showDialog}\">\r\n        <mwc-icon>edit</mwc-icon> Edit\r\n      </mwc-button>\r\n      ${this.show_form}\r\n    `;\r\n  }\r\n\r\n  private get show_form() {\r\n    return html`\r\n      <mwc-dialog class=\"z-0\" open-this-dialog=\"connection-type-update-${this.connection_type_id}\" heading=\"Update Connection Type\">\r\n        <div class=\"flex m-1 justify-evenly whitespace-normal z-10\">\r\n          <div class=\"form-container\">\r\n            <div class=\" !px-0\">\r\n              <div class=\"-row !px-0\">\r\n                <div class=\"-col-md-12\">\r\n                  <form method=\"post\" action=\"#\" class=\"form mt-0\" make-general-posts=\"user-connection-type-${this.connection_type_id}\">\r\n                    <div class=\"container my-4\">\r\n                      <div class=\"row justify-center\">\r\n                        <div class=\"col-md-12 col-lg-12\">\r\n                          <h4 class=\"font-semibold my-2\">Enter Type</h4>\r\n                          <mwc-textfield name=\"type\" type=\"text\" class=\"w-full\" id=\"type\" value=\"${this.connection_type}\"\r\n                            label=\"Enter Type\" outlined required>\r\n                          </mwc-textfield>\r\n                        </div>\r\n                        <div class=\"col-md-12 col-lg-12\">\r\n                          <h4 class=\"font-semibold my-2\">Enter Description</h4>\r\n                          <mwc-textarea name=\"description\" type=\"text\" class=\"w-full h-24\" id=\"description\"\r\n                            value=\"${this.connection_description}\" label=\"Enter Description\" outlined required>\r\n                          </mwc-textarea>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row justify-content-center\">\r\n                      <div class=\"col-md-12 col-lg-12\">\r\n                        <div class=\"form-input-container\">\r\n                          <mwc-button label=\"Update Connection Type\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                          </mwc-button>\r\n                        </div>\r\n      \r\n                        <div class=\"flex form-input-container items-center text-center\">\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                          <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                            Lets go digital...\r\n                          </label>\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <mwc-button slot=\"secondaryAction\" dialogAction=\"close\">\r\n          Cancel\r\n        </mwc-button>\r\n      </mwc-dialog>\r\n    `;\r\n  }\r\n\r\n  private showDialog(event: any) {\r\n    // event.preventDefault();\r\n    // console.log({event})\r\n\r\n    const dialogId = (event.currentTarget.getAttribute('open-dialog-btn'));\r\n    const dialog = this.querySelector('[open-this-dialog=\"' + dialogId + '\"]');\r\n    dialog.setAttribute('open', \"true\");\r\n  }\r\n\r\n  async submitForm(e: any) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n\r\n    const dialogId = `connection-type-update-${this.connection_type_id}`;\r\n    const dialog: Dialog = this.querySelector('[open-this-dialog=\"' + dialogId + '\"]');\r\n    \r\n    dialog.removeAttribute('open');\r\n    const response = await PUT_UserConnectionType(this.connection_type_id, dialog);\r\n    // console.log({dialogId, dialog, response});\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { UserConnectionType_I, UserConnectionType_S } from '@@addons/interfaces/members/connections/types';\r\nimport { GET_UserConnectionType } from '@@addons/network/members/connections/types';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport \"@material/mwc-icon-button\";\r\nimport \"../../../../assets/styles/views/home/dashboard.scss\";\r\nimport { DELETE_UserConnectionType } from '@@addons/network/members/connections/types/delete';\r\nimport './edit';\r\nimport \"@@addons/widgets/buttons/link-buttons/link-button\";\r\nimport { CONSTANTS } from '@@addons/constants';\r\n\r\n\r\n@customElement(\"pdb-connections-types-view\")\r\nexport class PdbConnectionsTypesView extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Array })\r\n  private _connection_types: UserConnectionType_I[] = [];\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    await this.getConnectionTypes();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n\r\n    if (this._connection_types === null) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <mwc-circular-progress indeterminate></mwc-circular-progress>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    if (this._connection_types === undefined) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <h4 class=\"text-red-600 text-lg\">\r\n              <span class=\"font-bold\">Schedule </span>: undefined error</h4>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <link-button isblockcontent=\"false\" aClass=\"\" raised bClass=\"button success mr-2\" \r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}member/connections/add-connection-type\" label=\"Add Connetion Type\">\r\n      </link-button>\r\n      ${this.table}\r\n    `;\r\n  }\r\n\r\n  private get table() {\r\n    return html`\r\n      <div class=\"mdc-data-table w-full\" mdc-data-table=\"data-table\">\r\n        <div class=\"mdc-data-table__table-container\">\r\n          <table class=\"mdc-data-table__table\" aria-label=\"New Meeting Member\">\r\n            <thead>\r\n              <tr class=\"mdc-data-table__header-row\">\r\n                <th class=\"mdc-data-table__header-cell\" role=\"columnheader\" scope=\"col\" aria-sort=\"ascending\">\r\n                  <div class=\"mdc-data-table__header-cell-wrapper\">\r\n                    <div class=\"mdc-data-table__header-cell-label\">\r\n                      <b>#</b>\r\n                    </div>\r\n                    <div class=\"mdc-data-table__sort-status-label\" aria-hidden=\"true\"></div>\r\n                  </div>\r\n                </th>\r\n                <th class=\"mdc-data-table__header-cell\" role=\"columnheader\" scope=\"col\" aria-sort=\"ascending\">\r\n                  <div class=\"mdc-data-table__header-cell-wrapper\">\r\n                    <div class=\"mdc-data-table__header-cell-label\">\r\n                      <b>Member(s)</b>\r\n                    </div>\r\n                    <div class=\"mdc-data-table__sort-status-label\" aria-hidden=\"true\"></div>\r\n                  </div>\r\n                </th>\r\n                <th class=\"mdc-data-table__header-cell !text-right\" role=\"columnheader\" scope=\"col\" aria-sort=\"ascending\">\r\n                  <div class=\"mdc-data-table__header-cell-wrapper\">\r\n                    <div class=\"mdc-data-table__header-cell-label\">\r\n                      <mwc-icon>tune</mwc-icon>\r\n                    </div>\r\n                    <div class=\"mdc-data-table__sort-status-label\" aria-hidden=\"true\"></div>\r\n                  </div>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody class=\"mdc-data-table__content\">\r\n              ${this.tableBody}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get tableBody() {\r\n\r\n    const DATA = this._connection_types;\r\n    // console.log({ \"this._connection_types\": this._connection_types });\r\n\r\n    if (Array.isArray(DATA)) {\r\n      return DATA.map(connection_type => {\r\n        return html`\r\n          <tr class=\"mdc-data-table__row\">\r\n            <th class=\"mdc-data-table__cell whitespace-pre-line\" scope=\"row\">\r\n              #\r\n            </th>\r\n            <td class=\"mdc-data-table__cell\" scope=\"row\">\r\n              <div class=\"flex flex-col whitespace-nowrap\">\r\n                <p class=\"ml-1\">${connection_type.type}</p>\r\n                <p class=\"ml-1\">${connection_type.description}</p>\r\n              </div>\r\n            </td>\r\n            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric !py-1\" scope=\"row\">\r\n              <div class=\"whitespace-nowrap\">\r\n                <pdb-connections-types-edit class=\"mx-1\" id=\"edit-con-${connection_type.id}\" \r\n                  connection_type_id=\"${connection_type.id}\" connection_type=\"${connection_type.type}\"\r\n                  connection_description=\"${connection_type.description}\">\r\n                </pdb-connections-types-edit>\r\n                <mwc-icon-button class=\"ml-1 danger\" icon=\"delete_forever\" delete-this-item=\"${connection_type.id}\" @click=\"${this.deleteConnectionType}\"></mwc-icon-button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        `;\r\n      });\r\n    }\r\n    return html``;\r\n  }\r\n\r\n  firstUpdated() {}\r\n\r\n  private async getConnectionTypes() {\r\n    const _networkResponse = await GET_UserConnectionType<UserConnectionType_I>(null);\r\n\r\n    let __connection_types: UserConnectionType_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __connection_types.push({ id: 0, type: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const data: any[] = _networkResponse.response.data;\r\n\r\n        const DATA: UserConnectionType_I[] = data.map(value => {\r\n          return UserConnectionType_S(value)\r\n        });\r\n        // console.log({DATA});\r\n        __connection_types = DATA;\r\n      }\r\n    }\r\n\r\n    const new_data: Array<UserConnectionType_I> = [];\r\n    new_data.push(...this._connection_types, ...__connection_types);\r\n    this._connection_types = new_data;\r\n  }\r\n\r\n  async deleteConnectionType(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n    \r\n    // @ts-ignore\r\n    const userConnectionId = Number(e.currentTarget.getAttribute('delete-this-item'));\r\n    \r\n    await DELETE_UserConnectionType(userConnectionId);\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","UserConnectionType_S","id","Number","type","String","clientId","description","createdBy","creationDate","Date","lastUpdatedBy","lastUpdateDate","DELETE_UserConnectionType","ID","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","formData","title","text","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","method","body","JSON","stringify","headers","Authorization","token","then","HTTP","networkCallRes","NetWorkCallResponses","_RESPONSE","response","unknownError","length","errors","e","err","push","res","console","errorHttp","postForm","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","GET_UserConnectionType","POST_UserConnectionType","formContainer","document","querySelector","FormData","errormsg","PUT_UserConnectionType","dialog","didClose","setAttribute","PAGE__IDS","PdbConnectionsTypesAdd","LitElement","constructor","super","showing","connectedCallback","disconnectedCallback","render","html","this","show_form","submitForm","preventDefault","firstUpdated","createRenderRoot","styles","css","property","Boolean","customElement","PdbConnectionsTypesEdit","connection_type_id","connection_type","connection_description","showDialog","event","dialogId","currentTarget","getAttribute","removeAttribute","PdbConnectionsTypesView","_connection_types","getConnectionTypes","undefined","table","tableBody","DATA","map","deleteConnectionType","_networkResponse","__connection_types","new_data","userConnectionId"],"sourceRoot":""}