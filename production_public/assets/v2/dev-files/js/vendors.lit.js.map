{"version":3,"file":"../../production_public/assets/v2/dev-files/js/vendors.lit.js","mappings":"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","sources":["webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/css-tag.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/base.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/custom-element.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/event-options.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/property.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/query-all.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/query-async.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/query.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/decorators/state.js","webpack://webpackNumbers/./node_modules/@lit/reactive-element/development/reactive-element.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = global.ShadowRoot &&\n    (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n    'adoptedStyleSheets' in Document.prototype &&\n    'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nconst cssTagCache = new WeakMap();\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n    constructor(cssText, strings, safeToken) {\n        // This property needs to remain unminified.\n        this['_$cssResult$'] = true;\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n        this._strings = strings;\n    }\n    // This is a getter so that it's lazy. In practice, this means stylesheets\n    // are not created until the first element instance is made.\n    get styleSheet() {\n        // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n        // constructable.\n        let styleSheet = this._styleSheet;\n        const strings = this._strings;\n        if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n            const cacheable = strings !== undefined && strings.length === 1;\n            if (cacheable) {\n                styleSheet = cssTagCache.get(strings);\n            }\n            if (styleSheet === undefined) {\n                (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);\n                if (cacheable) {\n                    cssTagCache.set(strings, styleSheet);\n                }\n            }\n        }\n        return styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\nconst textFromCSSResult = (value) => {\n    // This property needs to remain unminified.\n    if (value['_$cssResult$'] === true) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +\n            `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n            `to ensure page security.`);\n    }\n};\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (strings, ...values) => {\n    const cssText = strings.length === 1\n        ? strings[0]\n        : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, strings, constructionToken);\n};\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (renderRoot, styles) => {\n    if (supportsAdoptingStyleSheets) {\n        renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n    }\n    else {\n        styles.forEach((s) => {\n            const style = document.createElement('style');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const nonce = global['litNonce'];\n            if (nonce !== undefined) {\n                style.setAttribute('nonce', nonce);\n            }\n            style.textContent = s.cssText;\n            renderRoot.appendChild(style);\n        });\n    }\n};\nconst cssResultFromStyleSheet = (sheet) => {\n    let cssText = '';\n    for (const rule of sheet.cssRules) {\n        cssText += rule.cssText;\n    }\n    return unsafeCSS(cssText);\n};\nexport const getCompatibleStyle = supportsAdoptingStyleSheets ||\n    (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s) => s\n    : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const legacyPrototypeMethod = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nexport const standardPrototypeMethod = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty = ({ finisher, descriptor, }) => (protoOrDescriptor, name\n// Note TypeScript requires the return type to be `void|any`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    var _a;\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n        const ctor = protoOrDescriptor\n            .constructor;\n        if (descriptor !== undefined) {\n            Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n        }\n        finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name);\n        // Babel standard mode\n    }\n    else {\n        // Note, the @property decorator saves `key` as `originalKey`\n        // so try to use it here.\n        const key = \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (_a = protoOrDescriptor.originalKey) !== null && _a !== void 0 ? _a : protoOrDescriptor.key;\n        const info = descriptor != undefined\n            ? {\n                kind: 'method',\n                placement: 'prototype',\n                key,\n                descriptor: descriptor(protoOrDescriptor.key),\n            }\n            : { ...protoOrDescriptor, key };\n        if (finisher != undefined) {\n            info.finisher = function (ctor) {\n                finisher(ctor, key);\n            };\n        }\n        return info;\n    }\n};\n//# sourceMappingURL=base.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            customElements.define(tagName, clazz);\n        },\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement = (tagName) => (classOrDescriptor) => typeof classOrDescriptor === 'function'\n    ? legacyCustomElement(tagName, classOrDescriptor)\n    : standardCustomElement(tagName, classOrDescriptor);\n//# sourceMappingURL=custom-element.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from './base.js';\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options) {\n    return decorateProperty({\n        finisher: (ctor, name) => {\n            Object.assign(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            ctor.prototype[name], options);\n        },\n    });\n}\n//# sourceMappingURL=event-options.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' &&\n        element.descriptor &&\n        !('value' in element.descriptor)) {\n        return {\n            ...element,\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            },\n        };\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // store the original key so subsequent decorators have access to it.\n            originalKey: element.key,\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            },\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (protoOrDescriptor, name) => name !== undefined\n        ? legacyProperty(options, protoOrDescriptor, name)\n        : standardProperty(options, protoOrDescriptor);\n}\n//# sourceMappingURL=property.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from './base.js';\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector) {\n    return decorateProperty({\n        descriptor: (_name) => ({\n            get() {\n                var _a, _b;\n                return (_b = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector)) !== null && _b !== void 0 ? _b : [];\n            },\n            enumerable: true,\n            configurable: true,\n        }),\n    });\n}\n//# sourceMappingURL=query-all.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a;\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements = ((_a = global.HTMLSlotElement) === null || _a === void 0 ? void 0 : _a.prototype.assignedElements) != null\n    ? (slot, opts) => slot.assignedElements(opts)\n    : (slot, opts) => slot\n        .assignedNodes(opts)\n        .filter((node) => node.nodeType === Node.ELEMENT_NODE);\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options) {\n    const { slot, selector } = options !== null && options !== void 0 ? options : {};\n    return decorateProperty({\n        descriptor: (_name) => ({\n            get() {\n                var _a;\n                const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n                const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n                const elements = slotEl != null ? slotAssignedElements(slotEl, options) : [];\n                if (selector) {\n                    return elements.filter((node) => node.matches(selector));\n                }\n                return elements;\n            },\n            enumerable: true,\n            configurable: true,\n        }),\n    });\n}\n//# sourceMappingURL=query-assigned-elements.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nimport { queryAssignedElements } from './query-assigned-elements.js';\nexport function queryAssignedNodes(slotOrOptions, flatten, selector) {\n    // Normalize the overloaded arguments.\n    let slot = slotOrOptions;\n    let assignedNodesOptions;\n    if (typeof slotOrOptions === 'object') {\n        slot = slotOrOptions.slot;\n        assignedNodesOptions = slotOrOptions;\n    }\n    else {\n        assignedNodesOptions = { flatten };\n    }\n    // For backwards compatibility, queryAssignedNodes with a selector behaves\n    // exactly like queryAssignedElements with a selector.\n    if (selector) {\n        return queryAssignedElements({\n            slot: slot,\n            flatten,\n            selector,\n        });\n    }\n    return decorateProperty({\n        descriptor: (_name) => ({\n            get() {\n                var _a, _b;\n                const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n                const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n                return (_b = slotEl === null || slotEl === void 0 ? void 0 : slotEl.assignedNodes(assignedNodesOptions)) !== null && _b !== void 0 ? _b : [];\n            },\n            enumerable: true,\n            configurable: true,\n        }),\n    });\n}\n//# sourceMappingURL=query-assigned-nodes.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from './base.js';\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector) {\n    return decorateProperty({\n        descriptor: (_name) => ({\n            async get() {\n                var _a;\n                await this.updateComplete;\n                return (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        }),\n    });\n}\n//# sourceMappingURL=query-async.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from './base.js';\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n    return decorateProperty({\n        descriptor: (name) => {\n            const descriptor = {\n                get() {\n                    var _a, _b;\n                    return (_b = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(selector)) !== null && _b !== void 0 ? _b : null;\n                },\n                enumerable: true,\n                configurable: true,\n            };\n            if (cache) {\n                const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n                descriptor.get = function () {\n                    var _a, _b;\n                    if (this[key] === undefined) {\n                        this[key] = (_b = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(selector)) !== null && _b !== void 0 ? _b : null;\n                    }\n                    return this[key];\n                };\n            }\n            return descriptor;\n        },\n    });\n}\n//# sourceMappingURL=query.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { property } from './property.js';\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options) {\n    return property({\n        ...options,\n        state: true,\n    });\n}\n//# sourceMappingURL=state.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d;\nvar _e;\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\nimport { getCompatibleStyle, adoptStyles, } from './css-tag.js';\nexport * from './css-tag.js';\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\nif (NODE_MODE) {\n    (_a = global.customElements) !== null && _a !== void 0 ? _a : (global.customElements = {\n        define() { },\n    });\n}\nconst DEV_MODE = true;\nlet requestUpdateThenable;\nlet issueWarning;\nconst trustedTypes = global\n    .trustedTypes;\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n    ? trustedTypes.emptyScript\n    : '';\nconst polyfillSupport = DEV_MODE\n    ? global.reactiveElementPolyfillSupportDevMode\n    : global.reactiveElementPolyfillSupport;\nif (DEV_MODE) {\n    // Ensure warnings are issued only 1x, even if multiple versions of Lit\n    // are loaded.\n    const issuedWarnings = ((_b = global.litIssuedWarnings) !== null && _b !== void 0 ? _b : (global.litIssuedWarnings = new Set()));\n    // Issue a warning, if we haven't already.\n    issueWarning = (code, warning) => {\n        warning += ` See https://lit.dev/msg/${code} for more information.`;\n        if (!issuedWarnings.has(warning)) {\n            console.warn(warning);\n            issuedWarnings.add(warning);\n        }\n    };\n    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);\n    // Issue polyfill support warning.\n    if (((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.inUse) && polyfillSupport === undefined) {\n        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n            `the \\`polyfill-support\\` module has not been loaded.`);\n    }\n    requestUpdateThenable = (name) => ({\n        then: (onfulfilled, _onrejected) => {\n            issueWarning('request-update-promise', `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n                `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`);\n            if (onfulfilled !== undefined) {\n                onfulfilled(false);\n            }\n        },\n    });\n}\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n    ? (event) => {\n        const shouldEmit = global\n            .emitLitDebugLogEvents;\n        if (!shouldEmit) {\n            return;\n        }\n        global.dispatchEvent(new CustomEvent('lit-debug', {\n            detail: event,\n        }));\n    }\n    : undefined;\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                value = value ? emptyStringForBooleanAttribute : null;\n                break;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                value = value == null ? value : JSON.stringify(value);\n                break;\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        let fromValue = value;\n        switch (type) {\n            case Boolean:\n                fromValue = value !== null;\n                break;\n            case Number:\n                fromValue = value === null ? null : Number(value);\n                break;\n            case Object:\n            case Array:\n                // Do *not* generate exception when invalid JSON is set as elements\n                // don't normally complain on being mis-configured.\n                // TODO(sorvell): Do generate exception in *dev mode*.\n                try {\n                    // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n                    fromValue = JSON.parse(value);\n                }\n                catch (e) {\n                    fromValue = null;\n                }\n                break;\n        }\n        return fromValue;\n    },\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual,\n};\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\nconst htmlElementShimNeeded = NODE_MODE && global.HTMLElement === undefined;\nif (htmlElementShimNeeded) {\n    global.HTMLElement = class HTMLElement {\n    };\n}\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class ReactiveElement extends HTMLElement {\n    constructor() {\n        super();\n        this.__instanceProperties = new Map();\n        /**\n         * True if there is a pending update as a result of calling `requestUpdate()`.\n         * Should only be read.\n         * @category updates\n         */\n        this.isUpdatePending = false;\n        /**\n         * Is set to `true` after the first update. The element code cannot assume\n         * that `renderRoot` exists before the element `hasUpdated`.\n         * @category updates\n         */\n        this.hasUpdated = false;\n        /**\n         * Name of currently reflecting property\n         */\n        this.__reflectingProperty = null;\n        this._initialize();\n    }\n    /**\n     * Adds an initializer function to the class that is called during instance\n     * construction.\n     *\n     * This is useful for code that runs against a `ReactiveElement`\n     * subclass, such as a decorator, that needs to do work for each\n     * instance, such as setting up a `ReactiveController`.\n     *\n     * ```ts\n     * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n     *   target.addInitializer((instance: ReactiveElement) => {\n     *     // This is run during construction of the element\n     *     new MyController(instance);\n     *   });\n     * }\n     * ```\n     *\n     * Decorating a field will then cause each instance to run an initializer\n     * that adds a controller:\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   @myDecorator foo;\n     * }\n     * ```\n     *\n     * Initializers are stored per-constructor. Adding an initializer to a\n     * subclass does not add it to a superclass. Since initializers are run in\n     * constructors, initializers will run in order of the class hierarchy,\n     * starting with superclasses and progressing to the instance's class.\n     *\n     * @nocollapse\n     */\n    static addInitializer(initializer) {\n        var _a;\n        this.finalize();\n        ((_a = this._initializers) !== null && _a !== void 0 ? _a : (this._initializers = [])).push(initializer);\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     * @category attributes\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.elementProperties.forEach((v, p) => {\n            const attr = this.__attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this.__attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a {@linkcode PropertyDeclaration} for the property with the\n     * given options. The property setter calls the property's `hasChanged`\n     * property option or uses a strict identity check to determine whether or not\n     * to request an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * ```ts\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        var _a;\n        // if this is a state property, force the attribute to false.\n        if (options.state) {\n            // Cast as any since this is readonly.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            options.attribute = false;\n        }\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure finalization has been kicked off.\n        this.finalize();\n        this.elementProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n            const descriptor = this.getPropertyDescriptor(name, key, options);\n            if (descriptor !== undefined) {\n                Object.defineProperty(this.prototype, name, descriptor);\n                if (DEV_MODE) {\n                    // If this class doesn't have its own set, create one and initialize\n                    // with the values in the set from the nearest ancestor class, if any.\n                    if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n                        this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);\n                    }\n                    this.__reactivePropertyKeys.add(name);\n                }\n            }\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   static getPropertyDescriptor(name, key, options) {\n     *     const defaultDescriptor =\n     *         super.getPropertyDescriptor(name, key, options);\n     *     const setter = defaultDescriptor.set;\n     *     return {\n     *       get: defaultDescriptor.get,\n     *       set(value) {\n     *         setter.call(this, value);\n     *         // custom action.\n     *       },\n     *       configurable: true,\n     *       enumerable: true\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this.requestUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true,\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a `PropertyDeclaration` via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override\n     * {@linkcode createProperty}.\n     *\n     * @nocollapse\n     * @final\n     * @category properties\n     */\n    static getPropertyOptions(name) {\n        return this.elementProperties.get(name) || defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties, sets up element\n     * styling, and ensures any superclasses are also finalized. Returns true if\n     * the element was finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(finalized)) {\n            return false;\n        }\n        this[finalized] = true;\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        superCtor.finalize();\n        // Create own set of initializers for this class if any exist on the\n        // superclass and copy them down. Note, for a small perf boost, avoid\n        // creating initializers unless needed.\n        if (superCtor._initializers !== undefined) {\n            this._initializers = [...superCtor._initializers];\n        }\n        this.elementProperties = new Map(superCtor.elementProperties);\n        // initialize Map populated in observedAttributes\n        this.__attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...Object.getOwnPropertySymbols(props),\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeScript lack of support for symbol in\n                // index types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this.createProperty(p, props[p]);\n            }\n        }\n        this.elementStyles = this.finalizeStyles(this.styles);\n        // DEV mode warnings\n        if (DEV_MODE) {\n            const warnRemovedOrRenamed = (name, renamed = false) => {\n                if (this.prototype.hasOwnProperty(name)) {\n                    issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${this.name}. It ` +\n                        `has been ${renamed ? 'renamed' : 'removed'} ` +\n                        `in this version of LitElement.`);\n                }\n            };\n            warnRemovedOrRenamed('initialize');\n            warnRemovedOrRenamed('requestUpdateInternal');\n            warnRemovedOrRenamed('_getUpdateComplete', true);\n        }\n        return true;\n    }\n    /**\n     * Takes the styles the user supplied via the `static styles` property and\n     * returns the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * Styles are deduplicated preserving the _last_ instance in the list. This\n     * is a performance optimization to avoid duplicated styles that can occur\n     * especially when composing via subclassing. The last item is kept to try\n     * to preserve the cascade order with the assumption that it's most important\n     * that last added styles override previous styles.\n     *\n     * @nocollapse\n     * @category styles\n     */\n    static finalizeStyles(styles) {\n        const elementStyles = [];\n        if (Array.isArray(styles)) {\n            // Dedupe the flattened array in reverse order to preserve the last items.\n            // Casting to Array<unknown> works around TS error that\n            // appears to come from trying to flatten a type CSSResultArray.\n            const set = new Set(styles.flat(Infinity).reverse());\n            // Then preserve original order by adding the set items in reverse order.\n            for (const s of set) {\n                elementStyles.unshift(getCompatibleStyle(s));\n            }\n        }\n        else if (styles !== undefined) {\n            elementStyles.push(getCompatibleStyle(styles));\n        }\n        return elementStyles;\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static __attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false\n            ? undefined\n            : typeof attribute === 'string'\n                ? attribute\n                : typeof name === 'string'\n                    ? name.toLowerCase()\n                    : undefined;\n    }\n    /**\n     * Internal only override point for customizing work done when elements\n     * are constructed.\n     *\n     * @internal\n     */\n    _initialize() {\n        var _a;\n        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));\n        this._$changedProperties = new Map();\n        this.__saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdate();\n        (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach((i) => i(this));\n    }\n    /**\n     * Registers a `ReactiveController` to participate in the element's reactive\n     * update cycle. The element automatically calls into any registered\n     * controllers during its lifecycle callbacks.\n     *\n     * If the element is connected when `addController()` is called, the\n     * controller's `hostConnected()` callback will be immediately called.\n     * @category controllers\n     */\n    addController(controller) {\n        var _a, _b;\n        ((_a = this.__controllers) !== null && _a !== void 0 ? _a : (this.__controllers = [])).push(controller);\n        // If a controller is added after the element has been connected,\n        // call hostConnected. Note, re-using existence of `renderRoot` here\n        // (which is set in connectedCallback) to avoid the need to track a\n        // first connected state.\n        if (this.renderRoot !== undefined && this.isConnected) {\n            (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\n        }\n    }\n    /**\n     * Removes a `ReactiveController` from the element.\n     * @category controllers\n     */\n    removeController(controller) {\n        var _a;\n        // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n        // splice do nothing.\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    __saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor.elementProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                this.__instanceProperties.set(p, this[p]);\n                delete this[p];\n            }\n        });\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     *\n     * @return Returns a node into which to render.\n     * @category rendering\n     */\n    createRenderRoot() {\n        var _a;\n        const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\n        adoptStyles(renderRoot, this.constructor.elementStyles);\n        return renderRoot;\n    }\n    /**\n     * On first connection, creates the element's renderRoot, sets up\n     * element styling, and enables updating.\n     * @category lifecycle\n     */\n    connectedCallback() {\n        var _a;\n        // create renderRoot before first update.\n        if (this.renderRoot === undefined) {\n            this.renderRoot = this.createRenderRoot();\n        }\n        this.enableUpdating(true);\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c); });\n    }\n    /**\n     * Note, this method should be considered final and not overridden. It is\n     * overridden on the element instance with a function that triggers the first\n     * update.\n     * @category updates\n     */\n    enableUpdating(_requestedUpdate) { }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     * @category lifecycle\n     */\n    disconnectedCallback() {\n        var _a;\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c); });\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     *\n     * Specifically, when an attribute is set, the corresponding property is set.\n     * You should rarely need to implement this callback. If this method is\n     * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n     * called.\n     *\n     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n     * on MDN for more information about the `attributeChangedCallback`.\n     * @category attributes\n     */\n    attributeChangedCallback(name, _old, value) {\n        this._$attributeToProperty(name, value);\n    }\n    __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        var _a;\n        const attr = this.constructor.__attributeNameForProperty(name, options);\n        if (attr !== undefined && options.reflect === true) {\n            const converter = ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !==\n                undefined\n                ? options.converter\n                : defaultConverter;\n            const attrValue = converter.toAttribute(value, options.type);\n            if (DEV_MODE &&\n                this.constructor.enabledWarnings.indexOf('migration') >= 0 &&\n                attrValue === undefined) {\n                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` +\n                    `undefined on element ${this.localName}. The attribute will be ` +\n                    `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n                    `the attribute would not have changed.`);\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this.__reflectingProperty = name;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this.__reflectingProperty = null;\n        }\n    }\n    /** @internal */\n    _$attributeToProperty(name, value) {\n        var _a;\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        const propName = ctor.__attributeToPropertyMap.get(name);\n        // Use tracking info to avoid reflecting a property value to an attribute\n        // if it was just set because the attribute changed.\n        if (propName !== undefined && this.__reflectingProperty !== propName) {\n            const options = ctor.getPropertyOptions(propName);\n            const converter = typeof options.converter === 'function'\n                ? { fromAttribute: options.converter }\n                : ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== undefined\n                    ? options.converter\n                    : defaultConverter;\n            // mark state reflecting\n            this.__reflectingProperty = propName;\n            this[propName] = converter.fromAttribute(value, options.type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            );\n            // mark state not reflecting\n            this.__reflectingProperty = null;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should be called\n     * when an element should update based on some state not triggered by setting\n     * a reactive property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored.\n     *\n     * @param name name of requesting property\n     * @param oldValue old value of requesting property\n     * @param options property options to use instead of the previously\n     *     configured options\n     * @category updates\n     */\n    requestUpdate(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            options =\n                options ||\n                    this.constructor.getPropertyOptions(name);\n            const hasChanged = options.hasChanged || notEqual;\n            if (hasChanged(this[name], oldValue)) {\n                if (!this._$changedProperties.has(name)) {\n                    this._$changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true && this.__reflectingProperty !== name) {\n                    if (this.__reflectingProperties === undefined) {\n                        this.__reflectingProperties = new Map();\n                    }\n                    this.__reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this.isUpdatePending && shouldRequestUpdate) {\n            this.__updatePromise = this.__enqueueUpdate();\n        }\n        // Note, since this no longer returns a promise, in dev mode we return a\n        // thenable which warns if it's called.\n        return DEV_MODE\n            ? requestUpdateThenable(this.localName)\n            : undefined;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async __enqueueUpdate() {\n        this.isUpdatePending = true;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this.__updatePromise;\n        }\n        catch (e) {\n            // Refire any previous errors async so they do not disrupt the update\n            // cycle. Errors are refired so developers have a chance to observe\n            // them, and this can be done by implementing\n            // `window.onunhandledrejection`.\n            Promise.reject(e);\n        }\n        const result = this.scheduleUpdate();\n        // If `scheduleUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this.isUpdatePending;\n    }\n    /**\n     * Schedules an element update. You can override this method to change the\n     * timing of updates by returning a Promise. The update will await the\n     * returned Promise, and you should resolve the Promise to allow the update\n     * to proceed. If this method is overridden, `super.scheduleUpdate()`\n     * must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```ts\n     * override protected async scheduleUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.scheduleUpdate();\n     * }\n     * ```\n     * @category updates\n     */\n    scheduleUpdate() {\n        return this.performUpdate();\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * Call `performUpdate()` to immediately process a pending update. This should\n     * generally not be needed, but it can be done in rare cases when you need to\n     * update synchronously.\n     *\n     * Note: To ensure `performUpdate()` synchronously completes a pending update,\n     * it should not be overridden. In LitElement 2.x it was suggested to override\n     * `performUpdate()` to also customizing update scheduling. Instead, you should now\n     * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n     * scheduling updates via `performUpdate()` continues to work, but will make\n     * also calling `performUpdate()` to synchronously process updates difficult.\n     *\n     * @category updates\n     */\n    performUpdate() {\n        var _a, _b;\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this.isUpdatePending) {\n            return;\n        }\n        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({ kind: 'update' });\n        // create renderRoot before first update.\n        if (!this.hasUpdated) {\n            // Produce warning if any class properties are shadowed by class fields\n            if (DEV_MODE) {\n                const shadowedProperties = [];\n                (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n                    var _a;\n                    if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\n                        shadowedProperties.push(p);\n                    }\n                });\n                if (shadowedProperties.length) {\n                    throw new Error(`The following properties on element ${this.localName} will not ` +\n                        `trigger updates as expected because they are set using class ` +\n                        `fields: ${shadowedProperties.join(', ')}. ` +\n                        `Native class fields and some compiled output will overwrite ` +\n                        `accessors used for detecting changes. See ` +\n                        `https://lit.dev/msg/class-field-shadowing ` +\n                        `for more information.`);\n                }\n            }\n        }\n        // Mixin instance properties once, if they exist.\n        if (this.__instanceProperties) {\n            // Use forEach so this works even if for/of loops are compiled to for loops\n            // expecting arrays\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.__instanceProperties.forEach((v, p) => (this[p] = v));\n            this.__instanceProperties = undefined;\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._$changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.willUpdate(changedProperties);\n                (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach((c) => { var _a; return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c); });\n                this.update(changedProperties);\n            }\n            else {\n                this.__markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this.__markUpdated();\n            throw e;\n        }\n        // The update is no longer considered pending and further updates are now allowed.\n        if (shouldUpdate) {\n            this._$didUpdate(changedProperties);\n        }\n    }\n    /**\n     * Invoked before `update()` to compute values needed during the update.\n     *\n     * Implement `willUpdate` to compute property values that depend on other\n     * properties and are used in the rest of the update process.\n     *\n     * ```ts\n     * willUpdate(changedProperties) {\n     *   // only need to check changed properties for an expensive computation.\n     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n     *   }\n     * }\n     *\n     * render() {\n     *   return html`SHA: ${this.sha}`;\n     * }\n     * ```\n     *\n     * @category updates\n     */\n    willUpdate(_changedProperties) { }\n    // Note, this is an override point for polyfill-support.\n    // @internal\n    _$didUpdate(changedProperties) {\n        var _a;\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c); });\n        if (!this.hasUpdated) {\n            this.hasUpdated = true;\n            this.firstUpdated(changedProperties);\n        }\n        this.updated(changedProperties);\n        if (DEV_MODE &&\n            this.isUpdatePending &&\n            this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\n            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` +\n                `(generally because a property was set) ` +\n                `after an update completed, causing a new update to be scheduled. ` +\n                `This is inefficient and should be avoided unless the next update ` +\n                `can only be scheduled as a side effect of the previous update.`);\n        }\n    }\n    __markUpdated() {\n        this._$changedProperties = new Map();\n        this.isUpdatePending = false;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super.getUpdateComplete()`, then any subsequent state.\n     *\n     * @return A promise of a boolean that resolves to true if the update completed\n     *     without triggering another update.\n     * @category updates\n     */\n    get updateComplete() {\n        return this.getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   override async getUpdateComplete() {\n     *     const result = await super.getUpdateComplete();\n     *     await this._myChild.updateComplete;\n     *     return result;\n     *   }\n     * }\n     * ```\n     *\n     * @return A promise of a boolean that resolves to true if the update completed\n     *     without triggering another update.\n     * @category updates\n     */\n    getUpdateComplete() {\n        return this.__updatePromise;\n    }\n    /**\n     * Controls whether or not `update()` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    update(_changedProperties) {\n        if (this.__reflectingProperties !== undefined) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));\n            this.__reflectingProperties = undefined;\n        }\n        this.__markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * ```ts\n     * firstUpdated() {\n     *   this.renderRoot.getElementById('my-text-area').focus();\n     * }\n     * ```\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    firstUpdated(_changedProperties) { }\n}\n_e = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nReactiveElement[_e] = true;\n/**\n * Memoized list of all element properties, including any superclass properties.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category properties\n */\nReactiveElement.elementProperties = new Map();\n/**\n * Memoized list of all element styles.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category styles\n */\nReactiveElement.elementStyles = [];\n/**\n * Options used when calling `attachShadow`. Set this property to customize\n * the options for the shadowRoot; for example, to create a closed\n * shadowRoot: `{mode: 'closed'}`.\n *\n * Note, these options are used in `createRenderRoot`. If this method\n * is customized, options should be respected if possible.\n * @nocollapse\n * @category rendering\n */\nReactiveElement.shadowRootOptions = { mode: 'open' };\nif (htmlElementShimNeeded) {\n    delete global.HTMLElement;\n}\n// Apply polyfills if available\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ ReactiveElement });\n// Dev mode warnings...\nif (DEV_MODE) {\n    // Default warning set.\n    ReactiveElement.enabledWarnings = ['change-in-update'];\n    const ensureOwnWarnings = function (ctor) {\n        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n            ctor.enabledWarnings = ctor.enabledWarnings.slice();\n        }\n    };\n    ReactiveElement.enableWarning = function (warning) {\n        ensureOwnWarnings(this);\n        if (this.enabledWarnings.indexOf(warning) < 0) {\n            this.enabledWarnings.push(warning);\n        }\n    };\n    ReactiveElement.disableWarning = function (warning) {\n        ensureOwnWarnings(this);\n        const i = this.enabledWarnings.indexOf(warning);\n        if (i >= 0) {\n            this.enabledWarnings.splice(i, 1);\n        }\n    };\n}\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n((_d = global.reactiveElementVersions) !== null && _d !== void 0 ? _d : (global.reactiveElementVersions = [])).push('1.5.0');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +\n        `is not recommended.`);\n}\n//# sourceMappingURL=reactive-element.js.map"],"names":["global","window","supportsAdoptingStyleSheets","ShadowRoot","undefined","ShadyCSS","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","cssTagCache","WeakMap","CSSResult","constructor","cssText","strings","safeToken","this","Error","_strings","styleSheet","_styleSheet","cacheable","length","get","replaceSync","set","toString","unsafeCSS","value","String","css","values","reduce","acc","v","idx","textFromCSSResult","adoptStyles","renderRoot","styles","adoptedStyleSheets","map","s","forEach","style","document","createElement","nonce","setAttribute","textContent","appendChild","getCompatibleStyle","sheet","rule","cssRules","cssResultFromStyleSheet","legacyPrototypeMethod","descriptor","proto","name","Object","defineProperty","standardPrototypeMethod","element","kind","placement","key","decorateProperty","finisher","protoOrDescriptor","_a","originalKey","info","ctor","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","elements","standardCustomElement","eventOptions","options","assign","standardProperty","createProperty","initializer","call","property","legacyProperty","queryAll","selector","_name","_b","querySelectorAll","enumerable","configurable","slotAssignedElements","HTMLSlotElement","assignedElements","slot","opts","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","queryAssignedElements","slotSelector","slotEl","querySelector","matches","queryAssignedNodes","slotOrOptions","flatten","assignedNodesOptions","queryAsync","async","updateComplete","query","cache","state","_c","_d","requestUpdateThenable","issueWarning","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupportDevMode","issuedWarnings","litIssuedWarnings","Set","code","warning","has","console","warn","add","ShadyDOM","inUse","then","onfulfilled","_onrejected","debugLogEvent","event","emitLitDebugLogEvents","dispatchEvent","CustomEvent","detail","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","type","Boolean","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","finalized","ReactiveElement","HTMLElement","super","__instanceProperties","Map","isUpdatePending","hasUpdated","__reflectingProperty","_initialize","static","finalize","_initializers","push","observedAttributes","attributes","elementProperties","p","attr","__attributeNameForProperty","__attributeToPropertyMap","noAccessor","hasOwnProperty","getPropertyDescriptor","__reactivePropertyKeys","oldValue","requestUpdate","superCtor","getPrototypeOf","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","elementStyles","finalizeStyles","warnRemovedOrRenamed","renamed","isArray","flat","Infinity","reverse","unshift","toLowerCase","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","i","addController","controller","__controllers","isConnected","hostConnected","removeController","splice","indexOf","_v","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","attrValue","enabledWarnings","localName","removeAttribute","propName","getPropertyOptions","shouldRequestUpdate","__reflectingProperties","__enqueueUpdate","reject","result","scheduleUpdate","performUpdate","shadowedProperties","join","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","getUpdateComplete","k","mode","ensureOwnWarnings","slice","enableWarning","disableWarning","reactiveElementVersions"],"sourceRoot":""}