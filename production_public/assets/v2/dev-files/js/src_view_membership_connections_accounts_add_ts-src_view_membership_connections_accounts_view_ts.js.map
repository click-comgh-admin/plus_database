{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_view_membership_connections_accounts_add_ts-src_view_membership_connections_accounts_view_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/interfaces/members/connections/types.ts","webpack://webpackNumbers/./src/addons/network/members/connections/accounts/post.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/index.ts","webpack://webpackNumbers/./src/view/membership/connections/accounts/add.ts","webpack://webpackNumbers/./src/view/membership/connections/accounts/view.ts"],"sourcesContent":["export interface UserConnectionType_I {\r\n  id?: number,\r\n  clientId?: number,\r\n  type?: string,\r\n  description?: string,\r\n  lastUpdatedBy?: number,\r\n  lastUpdateDate?: Date,\r\n  createdBy?: number,\r\n  creationDate?: Date,\r\n}\r\n\r\nexport function UserConnectionType_S(data: any): UserConnectionType_I {\r\n  // console.log({data});\r\n\r\n  const userConnectionType_S: UserConnectionType_I = {\r\n    id: Number(data['id']),\r\n    type: String(data['type']),\r\n    clientId: Number(data['clientId']),\r\n    description: String(data['description']),\r\n    createdBy: Number(data['createdBy']),\r\n    creationDate: new Date(data['creationDate']),\r\n    lastUpdatedBy: Number(data['lastUpdatedBy']),\r\n    lastUpdateDate: new Date(data['lastUpdateDate']),\r\n  };\r\n\r\n  return userConnectionType_S;\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_UserConnectionAccount(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-account',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"user-connection-account\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add Connection?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_UserConnectionType<Type>(type: Number = null) {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import '@@assets/styles/views/attendance/setup/form.scss';\r\nimport { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport \"@material/mwc-button\";\r\nimport \"@material/mwc-textarea\";\r\nimport \"@material/mwc-textfield\";\r\nimport \"@material/mwc-select\";\r\nimport '@@addons/widgets/form/new/select';\r\nimport { POST_UserConnectionAccount } from '@@addons/network/members/connections/accounts/post';\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { SelectInputProcessedAjaxResponse_I, SelectInputProcessedAjaxUrlParam_I } from '@@addons/interfaces/form/select-input';\r\nimport { QueryOptions } from 'select2';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { UserConnectionType_I, UserConnectionType_S } from '@@addons/interfaces/members/connections/types';\r\nimport { GET_UserConnectionType } from '@@addons/network/members/connections/types';\r\nimport { MembershipUser_I, MembershipUser_S } from '@@addons/interfaces/members/user';\r\n\r\n\r\n@customElement(\"pdb-connections-accounts-add\")\r\nexport class PdbConnectionsAccountsAdd extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Boolean })\r\n  private showing?: boolean = false;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage1: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage2: number = 0;\r\n\r\n  @property({ type: Array })\r\n  private _connection_types: UserConnectionType_I[] = [];\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    await this.getConnectionTypes();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      ${this.show_form}\r\n      ${/** this.toggle_showing_button */ \"\" }\r\n    `;\r\n  }\r\n\r\n  private get show_form() {\r\n    let ajaxHeader: {Authorization?: string} = {};\r\n    // const _get_cookie = base64Decode(get_cookie('client_tokenLogin'));\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    // if (this.showing) {\r\n      return html`\r\n        <div class=\"\">\r\n          <div class=\"form-container\">\r\n            <div class=\" !px-0\">\r\n              <div class=\"-row !px-0\">\r\n                <div class=\"-col-md-12\">\r\n                  <header class=\"header warning -col-md-12\">\r\n                    <label for=\"\" class=\"label\">\r\n                      <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                      <h1 class=\"h1 !text-red-400\">New Connection Type</h1>\r\n                      <h3 class=\"h3\">Create New Connection Type!</h3>\r\n                    </label>\r\n                  </header>\r\n                  <form method=\"post\" action=\"#\" class=\"form mt-0\" make-general-posts=\"user-connection-account\">\r\n                    <div class=\"container my-4\">\r\n                      <div class=\"row justify-center\">\r\n\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Member</h4>\r\n                          <select-input class=\"w-100\" id=\"memberId\" name=\"memberId\" label=\"Select Member\"\r\n                            .ajaxFetchProcessResponse=\"${this.processClientUserSearch1}\" startSearchPage=\"${this.startSearchPage1}\"\r\n                            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams1}\"\r\n                            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n                        </div>\r\n\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Connection <span class=\"text-akwaaba-orange-light\">Account to be connected</span></h4>\r\n                          <select-input class=\"w-100\" id=\"connectionId\" name=\"connectionId\" label=\"Select Connection\"\r\n                            .ajaxFetchProcessResponse=\"${this.processClientUserSearch2}\" startSearchPage=\"${this.startSearchPage2}\"\r\n                            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams2}\"\r\n                            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n                        </div>\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Connection Type</h4>\r\n                          <mwc-select name=\"type\" class=\"w-full\" id=\"type\" label=\"Select Connection Type\" outlined required>\r\n                            <mwc-list-item value=\"0\">Select Connection Type</mwc-list-item>\r\n                            ${this._connection_types.map((value) => {\r\n                              // console.log({ \"schedule.type\": schedule.type, \"value.id\": value.id });\r\n                              return html`<mwc-list-item value=\"${value.id}\">${value.type}</mwc-list-item>`;\r\n                            })}\r\n                          </mwc-select>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row justify-content-center\">\r\n                      <div class=\"col-md-12 col-lg-12\">\r\n                        <div class=\"form-input-container\">\r\n                          <mwc-button label=\"Add Connection\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                          </mwc-button>\r\n                        </div>\r\n        \r\n                        <div class=\"flex form-input-container items-center text-center\">\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                          <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                            Lets go digital...\r\n                          </label>\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    // } else {\r\n    //   return nothing;\r\n    // }\r\n  }\r\n\r\n  // private get toggle_showing_button() {\r\n  //   if (this.showing) {\r\n  //     return html`\r\n  //       <mwc-button @click=\"${this.toggle_showing_button_action_hide}\" class=\"button warning\" raised label=\"Hide Add Form\">\r\n  //       </mwc-button>\r\n  //     `;\r\n  //   } else {\r\n  //     return html`\r\n  //       <mwc-button @click=\"${this.toggle_showing_button_action_show}\" class=\"button success\" raised label=\"Show Add Form\">\r\n  //       </mwc-button>\r\n  //     `;\r\n  //   }\r\n  // }\r\n\r\n  // private toggle_showing_button_action_show(e: any) {\r\n  //   e.preventDefault();\r\n  //   this.showing = true;\r\n  // }\r\n\r\n  // private toggle_showing_button_action_hide(e: any) {\r\n  //   e.preventDefault();\r\n  //   this.showing = false;\r\n  // }\r\n\r\n  private processClientUserSearch1(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"memberId\"]');\r\n    // console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const member: MembershipUser_I = MembershipUser_S(item);\r\n        \r\n        const id = member.id;\r\n        const fullName = `${member.firstname} ${member.middlename} ${member.surname}`;\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n    \r\n\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private processClientUserSearch2(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"connectionId\"]');\r\n    // console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const member: MembershipUser_I = MembershipUser_S(item);\r\n        \r\n        const id = member.id;\r\n        const fullName = `${member.firstname} ${member.middlename} ${member.surname}`;\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private get ajaxFetchUrlParams1(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get ajaxFetchUrlParams2(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private async getConnectionTypes() {\r\n    const _networkResponse = await GET_UserConnectionType<UserConnectionType_I>(null);\r\n\r\n    let __connection_types: UserConnectionType_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __connection_types.push({ id: 0, type: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const data: any[] = _networkResponse.response.data;\r\n\r\n        const DATA: UserConnectionType_I[] = data.map(value => {\r\n          return UserConnectionType_S(value)\r\n        });\r\n        // console.log({DATA});\r\n        __connection_types = DATA;\r\n      }\r\n    }\r\n\r\n    const new_data: Array<UserConnectionType_I> = [];\r\n    new_data.push(...this._connection_types, ...__connection_types);\r\n    this._connection_types = new_data;\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n    await POST_UserConnectionAccount();\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html, css, TemplateResult } from 'lit';\r\nimport { customElement, property, query, } from 'lit/decorators.js';\r\nimport \"@material/mwc-icon\";\r\nimport \"@material/mwc-icon-button\";\r\nimport \"../../../../assets/styles/views/home/dashboard.scss\";\r\nimport { DELETE_UserConnectionAccount } from '@@addons/network/members/connections/accounts/delete';\r\nimport { UserConnectionAccount_I } from '@@addons/interfaces/members/connections/accounts';\r\nimport { FilterFieldBox } from '@@addons/classes/filter_field_box';\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { urlQueryParams, urlQueryParamsJoin } from '@@addons/functions/url_query_params';\r\nimport { SelectInputProcessedAjaxResponse_I, SelectInputProcessedAjaxUrlParam_I } from '@@addons/interfaces/form/select-input';\r\nimport { Button } from '@material/mwc-button';\r\nimport { QueryOptions } from 'select2';\r\nimport '@@widgets/datatables';\r\nimport '@@interfaces/datatables';\r\nimport \"@material/mwc-select\";\r\nimport '@@addons/widgets/form/new/select';\r\nimport { UserConnectionType_I, UserConnectionType_S } from '@@addons/interfaces/members/connections/types';\r\nimport { GET_UserConnectionType } from '@@addons/network/members/connections/types';\r\nimport { show_selection_member_id_filter } from '../members_and_connections/view_members';\r\nimport { MembershipUser_I, MembershipUser_S } from '@@addons/interfaces/members/user';\r\nimport \"@@addons/widgets/buttons/link-buttons/link-button\";\r\n\r\n\r\n@customElement(\"pdb-connections-accounts-view\")\r\nexport class PdbConnectionsAccountsView extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @query('[filter-section-context=\"btn\"]')\r\n  private filterSectionContextBtn: Button;\r\n\r\n  @query('[filter-section-context=\"container\"]')\r\n  private filterSectionContextContainer: Element;\r\n\r\n  @query('[make-general-posts=\"submit_filter_form\"]')\r\n  private filterSectionContextForm: HTMLFormElement;\r\n\r\n  @property({ type: Array })\r\n  private _connection_accounts: UserConnectionAccount_I[] = [];\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage1: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage2: number = 0;\r\n\r\n  private filterBox: FilterFieldBox;\r\n\r\n  @property({ type: Array })\r\n  private _connection_types: UserConnectionType_I[] = [];\r\n\r\n  @property({ type: String })\r\n  private datatablePathUrl: string = \"members/user-connection-account\";\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      }\r\n    });\r\n\r\n    await this.getConnectionTypes();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n\r\n    if (this._connection_accounts === null) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <mwc-circular-progress indeterminate></mwc-circular-progress>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    if (this._connection_accounts === undefined) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <h4 class=\"text-red-600 text-lg\">\r\n              <span class=\"font-bold\">Schedule </span>: undefined error</h4>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <span class=\"flex flex-row md:flex-col w-100\"></span>\r\n      <div class=\"block my-1\">\r\n        <mwc-button icon=\"open_with\" label=\"Filters\" raised class=\"primary mt-1\"\r\n          filter-section-context=\"btn\" @click=\"${this.filterBox.toggleFilterFields}\">\r\n        </mwc-button>\r\n      </div>\r\n      <div class=\"block my-1\">\r\n        ${this.filterForm}\r\n      </div>\r\n      <div class=\"block my-1 overflow-x-scroll\">\r\n        <hr class=\"my-2\" />\r\n        <link-button isblockcontent=\"false\" aClass=\"\" raised bClass=\"button success mr-2\" \r\n          href=\"${CONSTANTS.URLS.PDB_CLIENT}member/connections/add-connection-account\" label=\"Add Connetion Account\">\r\n        </link-button>\r\n        <hr class=\"my-2\" />\r\n        ${this.table}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      }, unmutableInputNames: [],\r\n    });\r\n  }\r\n\r\n  private get filterForm() {\r\n    let returnHtml = html``;\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_memberId = \"memberId\",\r\n      filterNameId_filter_connectionId = \"connectionId\",\r\n      filterNameId_filter_type = \"type\";\r\n\r\n    let filterNameId_filter_memberIdVal: string = null,\r\n      filterNameId_filter_connectionIdVal: string = null,\r\n      filterNameId_filter_typeVal: string = null;\r\n\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    // const _get_cookie = base64Decode(get_cookie('client_tokenLogin'));\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n\r\n    for (const key in _urlQueryParams) {\r\n      let value = String(_urlQueryParams[key]);\r\n      value = value === \"\" ? null : value;\r\n      if (key === filterNameId_filter_memberId) {\r\n        filterNameId_filter_memberIdVal = value;\r\n      }\r\n      if (key === filterNameId_filter_connectionId) {\r\n        filterNameId_filter_connectionIdVal = value;\r\n      }\r\n      if (key === filterNameId_filter_type) {\r\n        filterNameId_filter_typeVal = value;\r\n      }\r\n    }\r\n\r\n    const memberField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Member</h4>\r\n        ${show_selection_member_id_filter(Number(filterNameId_filter_memberIdVal))}\r\n          <select-input class=\"w-100\" id=\"${filterNameId_filter_memberId}\" name=\"${filterNameId_filter_memberId}\" label=\"Select Member\"\r\n            .ajaxFetchProcessResponse=\"${this.processClientUserSearch1}\" startSearchPage=\"${this.startSearchPage1}\"\r\n            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams1}\"\r\n            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n      </div>`;\r\n\r\n    const connectionField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Connection</h4>\r\n        ${show_selection_member_id_filter(Number(filterNameId_filter_connectionIdVal))}\r\n          <select-input class=\"w-100\" id=\"${filterNameId_filter_connectionId}\" name=\"${filterNameId_filter_connectionId}\" label=\"Select Connection\"\r\n            .ajaxFetchProcessResponse=\"${this.processClientUserSearch2}\" startSearchPage=\"${this.startSearchPage2}\"\r\n            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams2}\"\r\n            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n      </div>`;\r\n\r\n    const typeField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Connection Type</h4>\r\n        <mwc-select name=\"type\" class=\"w-full\" id=\"type\" label=\"Select Connection Type\" outlined required>\r\n          <mwc-list-item value=\"0\">Select Connection Type</mwc-list-item>\r\n          ${this._connection_types.map((item) => {\r\n            if (filterNameId_filter_typeVal === null) {\r\n              return html`<mwc-list-item value=\"${item.id}\">${item.type}</mwc-list-item>`;\r\n            } else {\r\n              if (Number(filterNameId_filter_typeVal) === item.id) {\r\n                return html`<mwc-list-item value=\"${item.id}\" selected>${item.type}</mwc-list-item>`;\r\n              } else {\r\n                return html`<mwc-list-item value=\"${item.id}\">${item.type}</mwc-list-item>`;\r\n              }\r\n            }\r\n          })}\r\n        </mwc-select>\r\n      </div>`;\r\n\r\n    returnHtml = html`<form method=\"get\" class=\"form\" make-general-posts=\"submit_filter_form\" filter-section-context=\"container\" hidden>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          ${memberField} ${connectionField} ${typeField}\r\n          <div class=\"col-xl-12 col-md-10\">\r\n            <div class=\"form-input-container mt-1\">\r\n              <mwc-button label=\"Clear\" @click=\"${this.filterBox.clear_filter}\"></mwc-button>\r\n              <mwc-button label=\"Filter\" raised @click=\"${this.filterBox.submit}\"></mwc-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </form>`\r\n    return returnHtml;\r\n  }\r\n\r\n  private processClientUserSearch1(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"memberId\"]');\r\n    // console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const member: MembershipUser_I = MembershipUser_S(item);\r\n        \r\n        const id = member.id;\r\n        const fullName = `${member.firstname} ${member.middlename} ${member.surname}`;\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private processClientUserSearch2(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"connectionId\"]');\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const member: MembershipUser_I = MembershipUser_S(item);\r\n        \r\n        const id = member.id;\r\n        const fullName = `${member.firstname} ${member.middlename} ${member.surname}`;\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private get ajaxFetchUrlParams1(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get ajaxFetchUrlParams2(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get __tableHeaders(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Connection', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get __tableBody(): DataTables_ColumnSettings_I[][] {\r\n    return [];\r\n  }\r\n\r\n  private get __tableFoot(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Connection', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get table(): TemplateResult {\r\n    let URL = CONSTANTS.URLS.AKWAABA_API_BASE_URL + \"\" + this.datatablePathUrl + \"?datatable_plugin\";\r\n\r\n    const _urlQueryString = this.urlQueryString;\r\n    // console.log({_urlQueryString});\r\n    URL = URL + _urlQueryString;\r\n    // console.log({URL});\r\n\r\n    const __dataTable = this.__dataTable(URL);\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    return html`\r\n      <datatables-new .datatable=\"${__dataTable}\" .ajaxHeader=\"${ajaxHeader}\" .dt_body=\"${this.__tableBody}\"\r\n        .dt_foot=\"${this.__tableFoot}\" .dt_head=\"${this.__tableHeaders}\"></datatables-new>\r\n    `;\r\n  }\r\n\r\n  private renderMemberInfo(data: any, type: any, connectionInfo: UserConnectionAccount_I) {\r\n    // console.log({connectionInfo});\r\n    const memberId = connectionInfo.memberId;\r\n    const connectionId = connectionInfo.connectionId;\r\n    return `\r\n      <div class=\"flex flex-col\">\r\n        <div class=\"flex flex-col lg:flex-row m-1 justify-start\">\r\n          <div class=\"flex\">\r\n            <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Connection Name</h6>\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${connectionId.firstname} ${connectionId.middlename}\r\n              ${connectionId.surname}</p>\r\n          </div>\r\n          <div class=\"m-1\"><mwc-icon>directions<mwc-icon/></div>\r\n          <div class=\"flex\">\r\n            <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Member Name</h6>\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${memberId.firstname} ${memberId.middlename} ${memberId.surname}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderClockInInfo(data: any, type: any, connectionInfo: UserConnectionAccount_I) {\r\n    // console.log({connectionInfo});\r\n    const connectionType = connectionInfo.type;    \r\n    return `\r\n      <div class=\"justify-center content-center\">\r\n        <mwc-icon-button class=\"ml-1 danger\" icon=\"delete_forever\" \r\n          delete-this-item=\"${connectionInfo.id}\" >\r\n        </mwc-icon-button>\r\n        <div class=\"flex flex-col\">\r\n          <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Connection Type:</h6>\r\n          <div class=\"flex flex-col\">\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${connectionType.type}</p>\r\n            <p class=\"text-xs ml-1 whitespace-pre-wrap\">${connectionType.description}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get urlQueryString() {\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_memberId = \"memberId\",\r\n      filterNameId_filter_connectionId = \"connectionId\";\r\n\r\n    let newObject: any = {};\r\n\r\n    for (const key in _urlQueryParams) {\r\n      let value = String(_urlQueryParams[key]);\r\n      if ((key === filterNameId_filter_memberId) || (key === filterNameId_filter_connectionId)) {\r\n        // console.log({value, });\r\n\r\n        newObject[key] = value;\r\n      }\r\n    }\r\n\r\n    let _urlQueryParamsJoin = urlQueryParamsJoin(newObject);\r\n\r\n    return (_urlQueryParamsJoin.length === 0)\r\n      ? _urlQueryParamsJoin : \"&\" + _urlQueryParamsJoin;\r\n  }\r\n\r\n  private __dataTable(url: string): DataTables_Settings_I {\r\n    const __this = this;\r\n\r\n    // console.log({ \"__this\": __this, url });\r\n\r\n    let dataTable: DataTables_Settings_I = {\r\n      'order': [[0, 'desc']],\r\n      'processing': true,\r\n      'serverSide': true,\r\n      'ajax': {\r\n        url: url,\r\n        dataSrc: 'data',\r\n        apiType: \"akwaabaApp\",\r\n      },\r\n      \"columns\": [\r\n        {\r\n          data: 'id',\r\n          render: (data: any, type: any, connectionInfo: UserConnectionAccount_I) => __this.renderMemberInfo(data, type, connectionInfo),\r\n          orderable: true\r\n        },\r\n        {\r\n          data: 'inTime',\r\n          render: (data: any, type: any, connectionInfo: UserConnectionAccount_I) => __this.renderClockInInfo(data, type, connectionInfo),\r\n          orderable: true\r\n        },\r\n\r\n      ],\r\n      'columnDefs': [\r\n        {\r\n          targets: ['_all'],\r\n          className: 'mdc-data-table__cell',\r\n          // @ts-ignore\r\n          checkboxes: {\r\n            selectRow: true\r\n          },\r\n        }\r\n      ],\r\n      'lengthMenu': [10, 25, 50, 100, 500, 1000],\r\n      \"drawCallback\": async function (e) {\r\n        const aoData = e.aoData;\r\n        // console.log({ aoData })\r\n        __this.deleteConnectionAction();\r\n      },\r\n      \"responsive\": false,\r\n      \"dom\": 'Blfrtip',\r\n      buttons: [\r\n        'selected',\r\n        'selectedSingle',\r\n        'selectAll',\r\n        'selectNone',\r\n        'selectRows',\r\n        'selectColumns',\r\n        'selectCells',\r\n        'pdf',\r\n        'excel',\r\n        'copy',\r\n        'csv',\r\n      ],\r\n      select: true,\r\n      // \"select\": {\r\n      //   \"style\": \"multi\"\r\n      // },\r\n    };\r\n    return dataTable;\r\n  }\r\n\r\n  private async getConnectionTypes() {\r\n    const _networkResponse = await GET_UserConnectionType<UserConnectionType_I>(null);\r\n\r\n    let __connection_types: UserConnectionType_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __connection_types.push({ id: 0, type: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const data: any[] = _networkResponse.response.data;\r\n\r\n        const DATA: UserConnectionType_I[] = data.map(value => {\r\n          return UserConnectionType_S(value)\r\n        });\r\n        // console.log({DATA});\r\n        __connection_types = DATA;\r\n      }\r\n    }\r\n\r\n    const new_data: Array<UserConnectionType_I> = [];\r\n    new_data.push(...this._connection_types, ...__connection_types);\r\n    this._connection_types = new_data;\r\n  }\r\n\r\n  private deleteConnectionAction() {\r\n    document.querySelectorAll('[delete-this-item]').forEach((btn) => {\r\n      // console.log({btn})\r\n      btn.addEventListener('click', (e) => {\r\n        // console.log({e})\r\n        // e.preventDefault();\r\n        this.deleteConnection(e);\r\n      })\r\n    });\r\n  }\r\n\r\n  async deleteConnection(e: Event) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n\r\n    // @ts-ignore\r\n    const userConnectionId = Number(e.currentTarget.getAttribute('delete-this-item'));\r\n\r\n    await DELETE_UserConnectionAccount(userConnectionId);\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["UserConnectionType_S","data","id","Number","type","String","clientId","description","createdBy","creationDate","Date","lastUpdatedBy","lastUpdateDate","POST_UserConnectionAccount","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","method","body","headers","Authorization","token","then","HTTP","networkCallRes","NetWorkCallResponses","_RESPONSE","response","unknownError","length","errors","forEach","e","err","errormsg","error","push","res","https_swal_error_format","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","GET_UserConnectionType","console","errorHttp","PdbConnectionsAccountsAdd","LitElement","constructor","super","showing","startSearchPage1","startSearchPage2","_connection_types","connectedCallback","this","getConnectionTypes","disconnectedCallback","render","html","show_form","ajaxHeader","processClientUserSearch1","ajaxFetchUrlParams1","processClientUserSearch2","ajaxFetchUrlParams2","map","submitForm","params","page","TOTAL","count","RESULTS","results","SELECTOR","processedData","_data","i","item","member","MembershipUser_S","_new","text","firstname","middlename","surname","includes","total","totalShowing","param","_networkResponse","__connection_types","new_data","preventDefault","firstUpdated","createRenderRoot","styles","css","property","Boolean","Array","customElement","PdbConnectionsAccountsView","_connection_accounts","datatablePathUrl","filterBox","FilterFieldBox","selectors","container","filterSectionContextContainer","form","filterSectionContextForm","filterSectionContextBtn","undefined","toggleFilterFields","filterForm","table","unmutableInputNames","returnHtml","_urlQueryParams","urlQueryParams","filterNameId_filter_memberId","filterNameId_filter_connectionId","filterNameId_filter_memberIdVal","filterNameId_filter_connectionIdVal","filterNameId_filter_typeVal","key","memberField","show_selection_member_id_filter","connectionField","typeField","clear_filter","submit","__tableHeaders","__tableBody","__tableFoot","URL","urlQueryString","__dataTable","renderMemberInfo","connectionInfo","memberId","connectionId","renderClockInInfo","connectionType","newObject","_urlQueryParamsJoin","urlQueryParamsJoin","__this","dataSrc","apiType","orderable","targets","className","checkboxes","selectRow","aoData","deleteConnectionAction","buttons","select","querySelectorAll","btn","addEventListener","deleteConnection","userConnectionId","currentTarget","getAttribute","DELETE_UserConnectionAccount","query","Button","Element","HTMLFormElement"],"sourceRoot":""}