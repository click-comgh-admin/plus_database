{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_interfaces_clients_client_index_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/interfaces/clients/account_category/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/client/index.ts","webpack://webpackNumbers/./src/addons/interfaces/location/country_model/index.ts"],"sourcesContent":["// To parse this data:\n//\n//   import { Convert, ClientAccountCategoryModel } from \"./file\";\n//\n//   const clientAccountCategoryModel = Convert.toClientAccountCategoryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientAccountCategoryModel {\n  id?: number;\n  clientID?: number;\n  category?: string;\n  createdBy?: number;\n  updatedBy?: number;\n  updateDate?: Date;\n  date?: Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toClientAccountCategoryModel(json: string): ClientAccountCategoryModel {\n    return cast(JSON.parse(json), r(\"ClientAccountCategoryModel\"));\n  }\n\n  public static clientAccountCategoryModelToJson(value: ClientAccountCategoryModel): string {\n    return JSON.stringify(uncast(value, r(\"ClientAccountCategoryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n  if (key) {\n    // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n  }\n  if (typ === false) return;\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  // @ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"ClientAccountCategoryModel\": o([\n    { json: \"id\", js: \"id\", typ: u(null, 0) },\n    { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n    { json: \"category\", js: \"category\", typ: u(null, \"\") },\n    { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n    { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n    { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    { json: \"date\", js: \"date\", typ: u(null, Date) },\n  ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, ClientInfoModel } from \"./file\";\n//\n//   const clientInfoModel = Convert.toClientInfoModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nimport { LocationCountryModel, typeMap as cmTypeMap } from \"@@addons/interfaces/location/country_model\";\nimport { ClientAccountCategoryModel, typeMap as cacmTypeMap } from \"@@addons/interfaces/clients/account_category\";\n\nexport interface ClientInfoModel {\n    id?: number;\n    name?: string;\n    accountType?: number;\n    country?: string;\n    stateProvince?: string;\n    applicantFirstname?: string;\n    applicantSurname?: string;\n    applicantGender?: number;\n    applicantPhone?: string;\n    applicantEmail?: string;\n    applicantDesignationRole?: number;\n    region?: number;\n    district?: number;\n    constituency?: number;\n    community?: string;\n    subscriptionDuration?: string;\n    subscriptionDate?: Date;\n    subscriptionFee?: string;\n    logo?: string;\n    status?: number;\n    archive?: number;\n    accountCategory?: ClientAccountCategoryModel;\n    website?: string;\n    creationDate?: Date;\n    updatedBy?: number;\n    updateDate?: Date;\n    countryInfo?: LocationCountryModel[];\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toClientInfoModel(json: string): ClientInfoModel {\n        return cast(JSON.parse(json), r(\"ClientInfoModel\"));\n    }\n\n    public static clientInfoModelToJson(value: ClientInfoModel): string {\n        return JSON.stringify(uncast(value, r(\"ClientInfoModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) { }\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n                : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n                    : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"ClientInfoModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"name\", js: \"name\", typ: u(null, \"\") },\n        { json: \"accountType\", js: \"accountType\", typ: u(null, 0) },\n        { json: \"country\", js: \"country\", typ: u(null, \"\") },\n        { json: \"stateProvince\", js: \"stateProvince\", typ: u(null, \"\") },\n        { json: \"applicantFirstname\", js: \"applicantFirstname\", typ: u(null, \"\") },\n        { json: \"applicantSurname\", js: \"applicantSurname\", typ: u(null, \"\") },\n        { json: \"applicantGender\", js: \"applicantGender\", typ: u(null, 0) },\n        { json: \"applicantPhone\", js: \"applicantPhone\", typ: u(null, \"\") },\n        { json: \"applicantEmail\", js: \"applicantEmail\", typ: u(null, \"\") },\n        { json: \"applicantDesignationRole\", js: \"applicantDesignationRole\", typ: u(null, 0) },\n        { json: \"region\", js: \"region\", typ: u(null, 0) },\n        { json: \"district\", js: \"district\", typ: u(null, 0) },\n        { json: \"constituency\", js: \"constituency\", typ: u(null, 0) },\n        { json: \"community\", js: \"community\", typ: u(null, \"\") },\n        { json: \"subscriptionDuration\", js: \"subscriptionDuration\", typ: u(null, \"\") },\n        { json: \"subscriptionDate\", js: \"subscriptionDate\", typ: u(null, Date) },\n        { json: \"subscriptionFee\", js: \"subscriptionFee\", typ: u(null, \"\") },\n        { json: \"logo\", js: \"logo\", typ: u(null, \"\") },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"archive\", js: \"archive\", typ: u(null, 0) },\n        { json: \"accountCategory\", js: \"accountCategory\", typ: u(null, r(\"ClientAccountCategoryModel\")) },\n        { json: \"website\", js: \"website\", typ: u(null, \"\") },\n        { json: \"creationDate\", js: \"creationDate\", typ: u(null, Date) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"countryInfo\", js: \"countryInfo\", typ: u(null, a(r(\"LocationCountryModel\"))) },\n    ], false),\n    \"LocationCountryModel\": cmTypeMap['LocationCountryModel'],\n    \"ClientAccountCategoryModel\": cacmTypeMap['ClientAccountCategoryModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, LocationCountryModel } from \"./file\";\n//\n//   const countryModel = Convert.toCountryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface LocationCountryModel {\n  id: number;\n  name: string;\n  short: string;\n  code: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toCountryModel(json: string): LocationCountryModel {\n    return cast(JSON.parse(json), r(\"LocationCountryModel\"));\n  }\n\n  public static countryModelToJson(value: LocationCountryModel): string {\n    return JSON.stringify(uncast(value, r(\"LocationCountryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = ''): never {\n  if (key) {\n    throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val);\n  }\n  if (typ === false) return invalidValue(typ, val);\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  //@ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"LocationCountryModel\": o([\n    { json: \"id\", js: \"id\", typ: 0 },\n    { json: \"name\", js: \"name\", typ: \"\" },\n    { json: \"short\", js: \"short\", typ: \"\" },\n    { json: \"code\", js: \"code\", typ: \"\" },\n  ], false),\n};\n"],"names":["Convert","static","json","transform","JSON","parse","r","jsonToJSProps","value","stringify","jsToJSONProps","typ","undefined","jsonToJS","map","props","forEach","p","key","js","jsToJSON","val","getProps","ref","typeMap","Array","isArray","cases","indexOf","transformEnum","hasOwnProperty","typs","l","length","i","_","transformUnion","unionMembers","el","transformArray","arrayItems","additional","result","Object","getOwnPropertyNames","prop","v","prototype","call","transformObject","invalidValue","Date","d","isNaN","valueOf","transformDate","transformPrimitive","u","name","Error"],"sourceRoot":""}