{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_classes_network_calls_response_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/classes/network_calls/response.ts","webpack://webpackNumbers/./src/addons/functions/form_data_to_object/index.ts"],"sourcesContent":["// import { set_cookies_minutes } from '@@addons/functions/cookies';\r\nimport { formDataToJson } from '@@addons/functions/form_data_to_object';\r\nimport { NetworkCallHttp_I } from '@@addons/interfaces/network_calls/http';\r\nimport {\r\n  NetworkCallDatatableResponse_I, NetworkCallError_I,\r\n  NetworkCallNonFieldErrors_I,\r\n  NetworkCallPaginResponse_I, NetworkCallPostResponse_I,\r\n  NetworkCallResponseMethod_I, NetworkCallResponse_I,\r\n} from '@@addons/interfaces/network_calls/response';\r\n\r\nexport class NetWorkCallResponses<Type> {\r\n  constructor(method: NetworkCallResponseMethod_I, httpResponse: NetworkCallHttp_I, error: boolean = false, postForm: HTMLFormElement = null) {\r\n    const response = httpResponse.jsonData,\r\n      rawResponse = httpResponse.response;\r\n    this.postForm = postForm;\r\n    // console.log({'method === \"post\"': method === \"post\", method, response, rawResponse, error});\r\n\r\n    // if (httpResponse.response.ok) {\r\n    //   try {\r\n    //     // @ts-ignore\r\n    //     const cookieName = String(window.supersecret.unknowable.ops.cookieName);\r\n    //     set_cookies_minutes(`${cookieName}_date`, new Date().toUTCString(), 10);\r\n    //   } catch (error) {\r\n    //     console.log(error);\r\n    //   }\r\n    // }\r\n    if (error) {\r\n      // console.log({'method === \"post1\"': method === \"post\", method, response, rawResponse, error});\r\n      this.error(httpResponse.error);\r\n    } else {\r\n      // console.log({'method === \"post\"': method === \"post\", method, response, rawResponse, error});\r\n      if (method === \"get\") {\r\n        this.get(response, rawResponse);\r\n      } else if (method === \"post\") {\r\n        // console.log({method, response, rawResponse});\r\n        this.post(response, rawResponse);\r\n      } else if (method === \"post-file\") {\r\n        this.postFile(response, rawResponse);\r\n      } else if (method === \"put\") {\r\n        this.put(response, rawResponse);\r\n      } else if (method === \"patch\") {\r\n        this.patch(response, rawResponse);\r\n      } else if (method === \"delete\") {\r\n        this.delete(response, rawResponse);\r\n      }\r\n    }\r\n  }\r\n\r\n  public response: NetworkCallResponse_I<Type> | NetworkCallPostResponse_I = null;\r\n\r\n  public nonFieldErrorResponse: NetworkCallNonFieldErrors_I<Type> = null;\r\n\r\n  public multipleResponse: Array<NetworkCallPostResponse_I> = null;\r\n\r\n  public paginResponse: NetworkCallPaginResponse_I<Type> = null;\r\n\r\n  public databaseResponse: NetworkCallDatatableResponse_I<Type> = null;\r\n\r\n  public postForm: HTMLFormElement = null;\r\n\r\n  private error(response: any | object) {\r\n    this.response = response;\r\n    // this.nonFieldErrorResponse = response;\r\n  }\r\n\r\n  private outputResponse(success: boolean, message: string | Array<any>,\r\n    data: Array<Type> | Type): NetworkCallResponse_I<Type> {\r\n    return { success: success, message: message, data: data };\r\n  }\r\n\r\n  private outputResponsePagin(output: any): NetworkCallPaginResponse_I<Type> {\r\n    return {\r\n      count: output.count, next: output.next, previous: output.previous,\r\n      results: output.results,\r\n    };\r\n  }\r\n\r\n  private outputResponseDatatable(output: any): NetworkCallDatatableResponse_I<Type> {\r\n    return {\r\n      data: output.data, datatable_plugin: output.datatable_plugin,\r\n      draw: output.draw, recordsFiltered: output.recordsFiltered,\r\n      recordsTotal: output.recordsTotal,\r\n    };\r\n  }\r\n\r\n  private outputErrorResponse(success: boolean, message: string | Array<NetworkCallError_I>,\r\n    nameError: Array<NetworkCallError_I>, unknownError: Array<NetworkCallError_I>, data: Array<any>): NetworkCallPostResponse_I {\r\n    return {\r\n      success: success, message: message, nameError: nameError,\r\n      unknownError: unknownError, data: data\r\n    };\r\n  }\r\n\r\n  private get(response: any | object, rawResponse: Response) {\r\n    let newResponse: NetworkCallResponse_I<Type>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (response.hasOwnProperty('count') && response.hasOwnProperty('next')\r\n      && response.hasOwnProperty('previous') && response.hasOwnProperty('results')) {\r\n      this.paginResponse = this.outputResponsePagin(response);\r\n      return this.paginResponse;\r\n    } else if (response.hasOwnProperty('draw') && response.hasOwnProperty('recordsTotal')\r\n      && response.hasOwnProperty('recordsFiltered') && response.hasOwnProperty('data')) {\r\n      this.databaseResponse = this.outputResponseDatatable(response);\r\n      return this.databaseResponse;\r\n    } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n      newResponse = { data: [], message: response['detail'], success: false };\r\n    }\r\n\r\n    // console.log({ newResponse });\r\n\r\n\r\n    this.response = this.outputResponse(newResponse.success, newResponse.message, newResponse.data);\r\n  }\r\n  \r\n  postFile(response: any, rawResponse: Response) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  private post(response: any | object, rawResponse: Response) {\r\n    // console.log({response, rawResponse});\r\n\r\n    let newResponse: NetworkCallPostResponse_I;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (Array.isArray(response)) {\r\n      // console.log({\"rawResponse.ok1\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response[0]['SUCCESS_RESPONSE_MESSAGE'];\r\n        response.map((_response) => {\r\n          delete _response['SUCCESS_RESPONSE_MESSAGE'];\r\n          return _response;\r\n        });\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        let newResponses: NetworkCallPostResponse_I[] = [];\r\n        response.forEach((_response) => {\r\n          newResponse = this.postError(_response);\r\n          const _newResponse = this.outputErrorResponse(\r\n            newResponse.success, newResponse.message, newResponse.nameError,\r\n            newResponse.unknownError, newResponse.data\r\n          );\r\n          if (!newResponses.includes(_newResponse)) {\r\n            newResponses.push(_newResponse);\r\n          }\r\n        });\r\n        this.multipleResponse = newResponses;\r\n      }\r\n    } else {\r\n      // console.log({\"rawResponse.ok2\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response['SUCCESS_RESPONSE_MESSAGE'];\r\n        delete response['SUCCESS_RESPONSE_MESSAGE'];\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        newResponse = this.postError(response);\r\n        this.response = this.outputErrorResponse(\r\n          newResponse.success, newResponse.message, newResponse.nameError,\r\n          newResponse.unknownError, newResponse.data\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private postError(response: any | object): NetworkCallPostResponse_I {\r\n    const errorFields = this.postErrorFields(response),\r\n      nameErrorFields = this.postNamedErrorFields(errorFields),\r\n      nonNameErrorFields = this.postNonNamedErrorFields(errorFields);\r\n\r\n    const postErrorInputs = this.postErrorInputs(nameErrorFields, nonNameErrorFields);\r\n    return {\r\n      success: false, message: errorFields, nameError: postErrorInputs.nameErrorFields,\r\n      unknownError: postErrorInputs.nonNameErrorFields, data: response\r\n    }\r\n  }\r\n\r\n  private postErrorFields(response: any | object) {\r\n    // console.log({response});\r\n\r\n    let errors: Array<NetworkCallError_I> = [];\r\n    for (const key in response) {\r\n      if (Object.prototype.hasOwnProperty.call(response, key)) {\r\n        const RES = response[key];\r\n        const error: NetworkCallError_I = {\r\n          id: key, errors: RES\r\n        };\r\n\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  private postNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id !== \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private postNonNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id === \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private validateInput(input: Element) {\r\n    // console.log({ input, });\r\n    // console.log({ \"input.hasOwnProperty('mdcFoundation')\": input.hasOwnProperty('mdcFoundation') });\r\n\r\n    if (input.hasOwnProperty('mdcFoundation')) {\r\n      if (input.hasOwnProperty('setCustomValidity')) {\r\n        // @ts-ignore\r\n        input.setCustomValidity(\"\");\r\n      }\r\n      // @ts-ignore\r\n      input.isUiValid = true;\r\n      // @ts-ignore\r\n      input.validityTransform = (newValue, nativeValidity) => {\r\n        // console.log({ newValue, nativeValidity, });\r\n        if (nativeValidity.valid) {\r\n          return {};\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            customError: true,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private postErrorInputs(nameErrorFields: NetworkCallError_I[], nonNameErrorFields: NetworkCallError_I[]) {\r\n    // console.log({ \"this.postForm\": this.postForm });\r\n    // console.log({ \"this.postForm.elements\": this.postForm.elements });\r\n    if (this.postForm !== null) {\r\n      const _formDataToJson = JSON.parse(formDataToJson(new FormData(this.postForm)));\r\n      // console.log({ _formDataToJson });\r\n      for (const key in _formDataToJson) {\r\n        let input: Element;\r\n        try {\r\n          input = document.querySelector('[name=\"' + key + '\"]');\r\n        } catch (error) {\r\n          const newKey = key.replace('[]', '');\r\n          // console.log({key,newKey});\r\n          \r\n          input = document.querySelector('[id=\"' + newKey + '\"]');\r\n        }\r\n        this.validateInput(input);\r\n        input.addEventListener('change', (event) => {\r\n          this.validateInput(input);\r\n        });\r\n      }\r\n    }\r\n\r\n    nameErrorFields.forEach((error) => {\r\n      const inputs = document.querySelectorAll('[id=\"' + error.id + '\"]');\r\n      // console.log({ error, inputs });\r\n\r\n      inputs.forEach((input) => {\r\n        if (input.hasOwnProperty('mdcFoundation')) {\r\n          try {\r\n            // console.log({ input, \"error.errors\": error.errors, });\r\n            // console.log({\"_____typeof error.errors_____\": Array.isArray(error.errors) });\r\n            const errorErrors = error.errors;\r\n            if (Array.isArray(errorErrors)) {\r\n              // @ts-ignore\r\n              input.setCustomValidity(errorErrors.join('\\n'));\r\n            } else {\r\n              let _errorErrors: Array<string> = [];\r\n              // @ts-ignore\r\n              for (const key in errorErrors) {\r\n                if (Object.prototype.hasOwnProperty.call(errorErrors, key)) {\r\n                  const element: Array<string> = errorErrors[key];\r\n                  // console.log({ element })\r\n                  element.forEach(elem => {\r\n                    _errorErrors.push(`Item ${key}: ${elem}`)\r\n                  });\r\n                }\r\n              }\r\n              // @ts-ignore\r\n              input.setCustomValidity(_errorErrors.join('\\n'));\r\n            }\r\n            // @ts-ignore\r\n            input.reportValidity();\r\n            // @ts-ignore\r\n            input.isUiValid = false;\r\n          } catch (error) {\r\n            \r\n          }\r\n          // if (input.hasOwnProperty('setCustomValidity')) {\r\n          //   console.log({ input, });\r\n          //   // @ts-ignore\r\n          //   input.setCustomValidity(error.errors.join('\\n'));\r\n          //   // @ts-ignore\r\n          //   input.reportValidity();\r\n          //   // @ts-ignore\r\n          //   input.isUiValid = false;\r\n          // }\r\n        } else {\r\n          if (!nonNameErrorFields.includes(error)) {\r\n            nonNameErrorFields.push(error);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return { nameErrorFields, nonNameErrorFields }\r\n  }\r\n\r\n  private put(response: any | object, rawResponse: Response) {\r\n    // this.response = response;\r\n    // this.nonFieldErrorResponse = response;\r\n    this.post(response, rawResponse);\r\n  }\r\n\r\n  private patch(response: any | object, rawResponse: Response) {\r\n    // this.response = response;\r\n    // this.nonFieldErrorResponse = response;\r\n    this.post(response, rawResponse);\r\n  }\r\n\r\n  private delete(response: any | object, rawResponse: Response) {\r\n\r\n    let newResponse: NetworkCallResponse_I<string>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else {\r\n      // console.log({\"rawResponse.ok\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = \"Deleted\";\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n        newResponse = { data: [], message: response['detail'], success: false, };\r\n        this.response = this.outputResponse(newResponse.success, newResponse.message, []);\r\n      }\r\n    }\r\n  }\r\n}","export const formDataToJson = (formData: FormData) => {\r\n  let object: object = {};\r\n  formData.forEach((value, key) => {\r\n    // Reflect.has in favor of: object.hasOwnProperty(key)\r\n    if (!Reflect.has(object, key)) {\r\n      // @ts-ignore\r\n      object[key] = value;\r\n      return;\r\n    }\r\n    // @ts-ignore\r\n    if (!Array.isArray(object[key])) {\r\n      // @ts-ignore\r\n      object[key] = [object[key]];\r\n    }\r\n    // @ts-ignore\r\n    object[key].push(value);\r\n  });\r\n  return JSON.stringify(object);\r\n}"],"names":["NetWorkCallResponses","constructor","method","httpResponse","error","postForm","response","nonFieldErrorResponse","multipleResponse","paginResponse","databaseResponse","jsonData","rawResponse","this","get","post","postFile","put","patch","delete","outputResponse","success","message","data","outputResponsePagin","output","count","next","previous","results","outputResponseDatatable","datatable_plugin","draw","recordsFiltered","recordsTotal","outputErrorResponse","nameError","unknownError","newResponse","hasOwnProperty","status","Error","Array","isArray","ok","SUCCESS_RESPONSE_MESSAGE","map","_response","newResponses","forEach","postError","_newResponse","includes","push","errorFields","postErrorFields","nameErrorFields","postNamedErrorFields","nonNameErrorFields","postNonNamedErrorFields","postErrorInputs","errors","key","Object","prototype","call","id","validateInput","input","setCustomValidity","isUiValid","validityTransform","newValue","nativeValidity","valid","customError","_formDataToJson","JSON","parse","formDataToJson","FormData","document","querySelector","newKey","replace","addEventListener","event","querySelectorAll","errorErrors","join","_errorErrors","elem","reportValidity","formData","object","value","Reflect","has","stringify"],"sourceRoot":""}