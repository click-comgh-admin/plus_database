{"version":3,"file":"../../production_public/assets/v2/dev-files/js/vendors.lit-element.js","mappings":";soDASAA,QAAQC,KAAK,uvBCJTC,EAAIC,EAAIC,wBAiDL,MAAMC,EAAkB,EAAAC,gBAE/B,IAAIC,EACU,CAGV,MAAMC,EAA0D,QAAvCN,EAAKO,WAAWC,yBAAsC,IAAPR,EAAgBA,EAAMO,WAAWC,kBAAoB,IAAIC,IAEjIJ,EAAe,CAACK,EAAMC,KAClBA,GAAW,4BAA4BD,0BAClCJ,EAAeM,IAAID,KACpBb,QAAQC,KAAKY,GACbL,EAAeO,IAAIF,GACvB,CAER,CAUO,MAAMG,UAAmB,EAAAV,gBAC5BW,cACIC,SAASC,WAITC,KAAKC,cAAgB,CAAEC,KAAMF,MAC7BA,KAAKG,iBAAcC,CACvB,CAIAC,mBACI,IAAIvB,EACAC,EACJ,MAAMuB,EAAaR,MAAMO,mBAOzB,OADkD,QAAjDvB,GAAMC,EAAKiB,KAAKC,eAAeM,oBAAiC,IAAPzB,IAAsBC,EAAGwB,aAAeD,EAAWE,YACtGF,CACX,CAQAG,OAAOC,GAIH,MAAMC,EAAQX,KAAKY,SACdZ,KAAKa,aACNb,KAAKC,cAAca,YAAcd,KAAKc,aAE1ChB,MAAMW,OAAOC,GACbV,KAAKG,aAAc,IAAAS,QAAOD,EAAOX,KAAKM,WAAYN,KAAKC,cAC3D,CAqBAc,oBACI,IAAIjC,EACJgB,MAAMiB,oBACsB,QAA3BjC,EAAKkB,KAAKG,mBAAgC,IAAPrB,GAAyBA,EAAGkC,cAAa,EACjF,CAoBAC,uBACI,IAAInC,EACJgB,MAAMmB,uBACsB,QAA3BnC,EAAKkB,KAAKG,mBAAgC,IAAPrB,GAAyBA,EAAGkC,cAAa,EACjF,CAQAJ,SACI,OAAO,EAAAM,QACX,EASJtB,EAAsB,WAAI,EAE1BA,EAA0B,eAAI,EAEiB,QAA9Cb,EAAKM,WAAW8B,gCAA6C,IAAPpC,GAAyBA,EAAGqC,KAAK/B,WAAY,CAAEO,eAEtG,MAAMyB,EACAhC,WAAWiC,iCAEjBD,SAAkEA,EAAgB,CAAEzB,eAMhFA,EAAqB,SAAI,WAErB,IADkB,EAAAV,gBAAA,cAA8Bc,MAE5C,OAAO,EAEX,MAAMuB,EAAuB,CAACC,EAAKC,EAAMC,GAAU,KAC/C,GAAIF,EAAIG,eAAeF,GAAO,CAC1B,MAAMG,GAA2B,mBAARJ,EAAqBA,EAAMA,EAAI3B,aACnD4B,KACLtC,EAAauC,EAAU,cAAgB,cAAe,KAAKD,+BAAkCG,kBAC7EF,EAAU,UAAY,2CAE1C,GAKJ,OAHAH,EAAqBvB,KAAM,UAC3BuB,EAAqBvB,KAAM,aAAa,GACxCuB,EAAqBvB,KAAK6B,UAAW,gBAC9B,CACX,EAqBG,MAAMC,EAAO,CAChBC,sBAAuB,CAACC,EAAIP,EAAMd,KAE9BqB,EAAGD,sBAAsBN,EAAMd,EAAM,EAGzCsB,oBAAsBD,GAAOA,EAAGC,sBAIM,QAAxCjD,EAAKK,WAAW6C,0BAAuC,IAAPlD,EAAgBA,EAAMK,WAAW6C,mBAAqB,IAAKC,KAAK,SAClG9C,WAAW6C,mBAAmBE,OAAS,GACnDjD,EAAa,oBAAqB","sources":["webpack://webpackNumbers/./node_modules/lit-element/development/index.js","webpack://webpackNumbers/./node_modules/lit-element/development/lit-element.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\nexport * from './lit-element.js';\nexport * from './decorators.js';\nconsole.warn(\"The main 'lit-element' module entrypoint is deprecated. Please update \" +\n    \"your imports to use the 'lit' package: 'lit' and 'lit/decorators.ts' \" +\n    \"or import from 'lit-element/lit-element.ts'. See \" +\n    'https://lit.dev/msg/deprecated-import-path for more information.');\n//# sourceMappingURL=index.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c;\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { ReactiveElement } from '@lit/reactive-element';\nimport { render, noChange } from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\nconst DEV_MODE = true;\nlet issueWarning;\nif (DEV_MODE) {\n    // Ensure warnings are issued only 1x, even if multiple versions of Lit\n    // are loaded.\n    const issuedWarnings = ((_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : (globalThis.litIssuedWarnings = new Set()));\n    // Issue a warning, if we haven't already.\n    issueWarning = (code, warning) => {\n        warning += ` See https://lit.dev/msg/${code} for more information.`;\n        if (!issuedWarnings.has(warning)) {\n            console.warn(warning);\n            issuedWarnings.add(warning);\n        }\n    };\n}\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @category rendering\n         */\n        this.renderOptions = { host: this };\n        this.__childPart = undefined;\n    }\n    /**\n     * @category rendering\n     */\n    createRenderRoot() {\n        var _a;\n        var _b;\n        const renderRoot = super.createRenderRoot();\n        // When adoptedStyleSheets are shimmed, they are inserted into the\n        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n        // any styles in Lit content render before adoptedStyleSheets. This is\n        // important so that adoptedStyleSheets have precedence over styles in\n        // the shadowRoot.\n        (_a = (_b = this.renderOptions).renderBefore) !== null && _a !== void 0 ? _a : (_b.renderBefore = renderRoot.firstChild);\n        return renderRoot;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param changedProperties Map of changed properties with old values\n     * @category updates\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const value = this.render();\n        if (!this.hasUpdated) {\n            this.renderOptions.isConnected = this.isConnected;\n        }\n        super.update(changedProperties);\n        this.__childPart = render(value, this.renderRoot, this.renderOptions);\n    }\n    /**\n     * Invoked when the component is added to the document's DOM.\n     *\n     * In `connectedCallback()` you should setup tasks that should only occur when\n     * the element is connected to the document. The most common of these is\n     * adding event listeners to nodes external to the element, like a keydown\n     * event handler added to the window.\n     *\n     * ```ts\n     * connectedCallback() {\n     *   super.connectedCallback();\n     *   addEventListener('keydown', this._handleKeydown);\n     * }\n     * ```\n     *\n     * Typically, anything done in `connectedCallback()` should be undone when the\n     * element is disconnected, in `disconnectedCallback()`.\n     *\n     * @category lifecycle\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(true);\n    }\n    /**\n     * Invoked when the component is removed from the document's DOM.\n     *\n     * This callback is the main signal to the element that it may no longer be\n     * used. `disconnectedCallback()` should ensure that nothing is holding a\n     * reference to the element (such as event listeners added to nodes external\n     * to the element), so that it is free to be garbage collected.\n     *\n     * ```ts\n     * disconnectedCallback() {\n     *   super.disconnectedCallback();\n     *   window.removeEventListener('keydown', this._handleKeydown);\n     * }\n     * ```\n     *\n     * An element may be re-connected after being disconnected.\n     *\n     * @category lifecycle\n     */\n    disconnectedCallback() {\n        var _a;\n        super.disconnectedCallback();\n        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(false);\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `ChildPart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     * @category rendering\n     */\n    render() {\n        return noChange;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\nLitElement['finalized'] = true;\n// This property needs to remain unminified.\nLitElement['_$litElement$'] = true;\n// Install hydration if available\n(_b = globalThis.litElementHydrateSupport) === null || _b === void 0 ? void 0 : _b.call(globalThis, { LitElement });\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n    ? globalThis.litElementPolyfillSupportDevMode\n    : globalThis.litElementPolyfillSupport;\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ LitElement });\n// DEV mode warnings\nif (DEV_MODE) {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    // Note, for compatibility with closure compilation, this access\n    // needs to be as a string property index.\n    LitElement['finalize'] = function () {\n        const finalized = ReactiveElement.finalize.call(this);\n        if (!finalized) {\n            return false;\n        }\n        const warnRemovedOrRenamed = (obj, name, renamed = false) => {\n            if (obj.hasOwnProperty(name)) {\n                const ctorName = (typeof obj === 'function' ? obj : obj.constructor)\n                    .name;\n                issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${ctorName}. It ` +\n                    `has been ${renamed ? 'renamed' : 'removed'} ` +\n                    `in this version of LitElement.`);\n            }\n        };\n        warnRemovedOrRenamed(this, 'render');\n        warnRemovedOrRenamed(this, 'getStyles', true);\n        warnRemovedOrRenamed(this.prototype, 'adoptStyles');\n        return true;\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n    _$attributeToProperty: (el, name, value) => {\n        // eslint-disable-next-line\n        el._$attributeToProperty(name, value);\n    },\n    // eslint-disable-next-line\n    _$changedProperties: (el) => el._$changedProperties,\n};\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n((_c = globalThis.litElementVersions) !== null && _c !== void 0 ? _c : (globalThis.litElementVersions = [])).push('3.2.2');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +\n        `is not recommended.`);\n}\n//# sourceMappingURL=lit-element.js.map"],"names":["console","warn","_a","_b","_c","UpdatingElement","ReactiveElement","issueWarning","issuedWarnings","globalThis","litIssuedWarnings","Set","code","warning","has","add","LitElement","constructor","super","arguments","this","renderOptions","host","__childPart","undefined","createRenderRoot","renderRoot","renderBefore","firstChild","update","changedProperties","value","render","hasUpdated","isConnected","connectedCallback","setConnected","disconnectedCallback","noChange","litElementHydrateSupport","call","polyfillSupport","litElementPolyfillSupportDevMode","warnRemovedOrRenamed","obj","name","renamed","hasOwnProperty","ctorName","prototype","_$LE","_$attributeToProperty","el","_$changedProperties","litElementVersions","push","length"],"sourceRoot":""}