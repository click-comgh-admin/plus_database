{"version":3,"file":"../../production_public/assets/v2/prod-test-files/js/redirect.js","mappings":"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","sources":["webpack://webpackNumbers/webpack/universalModuleDefinition","webpack://webpackNumbers/./src/addons/functions/url_query_params/index.ts","webpack://webpackNumbers/./src/addons/functions/views/home/branch/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/network/clients/branches/index.ts","webpack://webpackNumbers/./src/view/redirect/index.ts","webpack://webpackNumbers/./src/addons/network/login/verify_token_alt.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"webpackNumbers\"] = factory();\n\telse\n\t\troot[\"webpackNumbers\"] = factory();\n})(self, () => {\nreturn ","export const urlQueryParams = () => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n  return params;\r\n}\r\nexport const urlQueryParamsGet = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n  let value: string = null;\r\n  for (const key in params) {\r\n    if (key === query) {\r\n      value = params[key]\r\n    }\r\n  }\r\n  return value;\r\n}\r\nexport const urlQueryParamsGetAll = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = urlSearchParams.getAll(query);\r\n  return params;\r\n}\r\n\r\nexport const urlQueryParamsJoin = (object:{\r\n  [k: string]: string;\r\n}) => {\r\n  let urlStr: string = \"\";\r\n  let index = 0;\r\n  for (const key in object) {\r\n    index += 1; \r\n    urlStr += `${(index > 1) ? \"&\": \"\"}${key}=${object[key]}`;\r\n  }\r\n  return urlStr;\r\n}","import { base64Encode, base64Decode } from \"@@addons/functions/base64\";\r\nimport { set_cookies, get_cookie } from \"@@addons/functions/cookies\";\r\nimport { clientBranchInfo_S, ClientBranchShort_I } from \"@@addons/interfaces/clients/branches\";\r\n\r\nconst userLoginInfo = 'pdb-active-branch';\r\n\r\nexport const setActiveBranchIdCookie = (data: ClientBranchShort_I) => {\r\n  const stringData = JSON.stringify(data);\r\n  // console.log({data, stringData});\r\n  \r\n  set_cookies(userLoginInfo, \"\", -1);\r\n  set_cookies(userLoginInfo, base64Encode(stringData), 3500);\r\n}\r\n\r\nexport function removeActiveBranchIdCookie() {\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n}\r\n\r\nexport const getActiveBranchIdCookie = (): ClientBranchShort_I => {\r\n  const rawCookie = get_cookie(userLoginInfo);\r\n  // console.log({\"rawCookie-getActiveBranchId\": rawCookie, userLoginInfo});\r\n  \r\n  if (rawCookie === \"\") {\r\n    return null;\r\n  } else {\r\n    const _cookie = base64Decode(get_cookie(userLoginInfo)),\r\n      cookie = JSON.parse(_cookie);\r\n\r\n    return clientBranchInfo_S(cookie);\r\n  }\r\n}","export interface ClientBranches_I {\r\n  id: number,\r\n  name: string,\r\n  accountId?: number,\r\n  createdBy?: number,\r\n  creationDate?: Date,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n}\r\n\r\nexport function ClientBranch_S(data: any): ClientBranches_I {\r\n  const clientBranchInfo_S: ClientBranches_I = {\r\n    id: Number(data['id']),\r\n    name: String(data['name']),\r\n    accountId: Number(data['accountId']),\r\n    createdBy: Number(data['createdBy']),\r\n    creationDate: new Date(data['creationDate']),\r\n    updatedBy: Number(data['updatedBy']),\r\n    updateDate: new Date(data['updateDate']),\r\n  };\r\n\r\n  return clientBranchInfo_S;\r\n}\r\n\r\nexport interface ClientBranchShort_I {\r\n  id: number,\r\n  name: string,\r\n  accountId?: number,\r\n}\r\n\r\nexport function clientBranchInfo_S(data: any): ClientBranchShort_I {\r\n  const clientBranchInfo_S = {\r\n    id: Number(data['id']),\r\n    name: String(data['name']),\r\n    accountId: Number(data['accountId']),\r\n  };\r\n\r\n  return clientBranchInfo_S;\r\n}\r\n","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientBranches<Type>(type: Number = null) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/branch'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import \"@@assets/styles/views/login/main.scss\";\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '@@assets/styles/views/tailwind-output/unaccessible_pages.scss';\r\nimport '@material/mwc-circular-progress';\r\nimport { urlQueryParamsGet } from \"@@addons/functions/url_query_params\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LogUserOut, setUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { removeActiveBranchIdCookie, setActiveBranchIdCookie } from \"@@addons/functions/views/home/branch\";\r\nimport { userLoginInfo_S } from \"@@addons/interfaces/network_calls/login\";\r\nimport { ClientBranches_I } from \"@@addons/interfaces/clients/branches\";\r\nimport { GET_ClientBranches } from \"@@addons/network/clients/branches\";\r\nimport { POST_VerifyTokenAlt } from \"@@addons/network/login/verify_token_alt\";\r\n\r\n@customElement('pdb-redirection')\r\nexport class PdbRedirection extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: String })\r\n  private token?: string = null;\r\n\r\n  @property({ type: String })\r\n  private redirectPage: string = \"\";\r\n\r\n  @property({ type: String })\r\n  private message: string = \"Checking Permission\";\r\n\r\n  @property({ type: Boolean })\r\n  private loading: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  private verifyingToken: boolean = false;\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.getToken();\r\n    this.getRedirectPage();\r\n\r\n    setInterval(async () => {\r\n      console.log({\"this.token\": this.token, \"this.verifyingToken\": this.verifyingToken})\r\n      if ((this.token !== null) && (this.verifyingToken === false)) {\r\n        this.verifyingToken = true;\r\n        await this.verifyToken();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: block;\r\n      }\r\n    `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"mx-12 my-24 md:mx-12 md:my-24 xl:m-24 shadow p-2\">\r\n        <section class=\"background-radial-gradient\">\r\n          <div class=\"px-6 py-12 md:px-12 text-center lg:text-left\">\r\n            <div class=\"container mx-auto xl:px-32\">\r\n              <div class=\"flex justify-center items-center\">\r\n                <div class=\"mt-12 lg:mt-0\">\r\n                  <h5 class=\"text-xl md:text-2xl xl:text-3xl font-bold tracking-tight mb-12\" style=\"color: hsl(218, 81%, 95%);\">\r\n                    ${this.message}\r\n                  </h5>\r\n                  <div class=\"flex justify-center items-center\">\r\n                    ${this.loading? html`\r\n                      <div class=\"flex justify-center\">\r\n                        <mwc-circular-progress indeterminate></mwc-circular-progress>\r\n                      </div>`: nothing}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private getToken() {\r\n    this.loading = true;\r\n    setTimeout(() => {\r\n      this.message = \"Getting Token\";\r\n    }, 100);\r\n    let permissionKey = urlQueryParamsGet('permission-key');\r\n    console.log({ permissionKey });\r\n    let _permissionKey = permissionKey !== null ? base64Decode(permissionKey) : null;\r\n\r\n    if (_permissionKey === null) {\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n        this.message = \"No Token Found.\";\r\n        LogUserOut();\r\n        removeActiveBranchIdCookie();\r\n      }, 100);\r\n      window.location.href = CONSTANTS.URLS.LOGIN_PAGE_BASE_URL;\r\n    } else {\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n        this.message = \"Token Obtained\";\r\n      }, 100);\r\n\r\n      this.token = _permissionKey;\r\n    }\r\n  }\r\n\r\n  private getRedirectPage() {\r\n    this.loading = true;\r\n    setTimeout(() => {\r\n      this.message = \"Getting Redirect Page\";\r\n    }, 100);\r\n    let accessPageKey = urlQueryParamsGet('access-page-key');\r\n    console.log({ accessPageKey });\r\n    let _accessPageKey = accessPageKey !== null ? base64Decode(accessPageKey) : null;\r\n\r\n    if (_accessPageKey === null) {\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n        this.message = \"No Redirect Page Found.\";\r\n        LogUserOut();\r\n        removeActiveBranchIdCookie();\r\n      }, 100);\r\n      window.location.href = CONSTANTS.URLS.LOGIN_PAGE_BASE_URL;\r\n    } else {\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n        this.message = \"Redirect Page Obtained\";\r\n      }, 100);\r\n\r\n      this.redirectPage = _accessPageKey;\r\n    }\r\n  }\r\n\r\n  private redirectToPage() {\r\n    this.loading = true;\r\n    this.message = \"Redirecting ...\";\r\n\r\n    window.location.href = CONSTANTS.URLS.PDB_CLIENT + this.redirectPage;\r\n  }\r\n\r\n  private async verifyToken() {\r\n    this.loading = true;\r\n    const _networkResponse = await POST_VerifyTokenAlt(this.token);\r\n    \r\n    if (_networkResponse !== null) {\r\n      console.log({_networkResponse});\r\n      const RESPONSE = _networkResponse.response;\r\n      console.log({RESPONSE});\r\n      \r\n      if (RESPONSE.success) {\r\n        if (RESPONSE.success && 'expiry' in RESPONSE.data && 'token' in RESPONSE.data && 'user' in RESPONSE.data) {\r\n          this.loading = false;\r\n          this.message = \"Logging In\";\r\n          const userLoginInfo = userLoginInfo_S(RESPONSE.data);\r\n          setUserLoginInfoCookie(userLoginInfo);\r\n          removeActiveBranchIdCookie();\r\n  \r\n          try {\r\n            this.loading = true;\r\n            const _branches = await GET_ClientBranches<ClientBranches_I>(userLoginInfo.user.branchId);\r\n            if (!Array.isArray(_branches.response.data)) {\r\n              setActiveBranchIdCookie(_branches.response.data);\r\n            }\r\n            this.loading = false;\r\n          } catch (error) {\r\n            console.error({ error });\r\n          }\r\n          this.redirectToPage();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    this.loading = false;\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n\r\n","import { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\n\r\nexport async function POST_VerifyTokenAlt(verify_token: string): Promise<any> {\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/verify-token',\r\n    formData = { \"token\": verify_token };\r\n  return await http(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(formData),\r\n  }, true).then((HTTP) => {\r\n\r\n    const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false,);\r\n    return networkCallRes;\r\n  }).catch(error => {\r\n    console.log({ error });\r\n  });\r\n}"],"names":["root","factory","exports","module","define","amd","self","urlQueryParams","urlSearchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","urlQueryParamsGet","query","params","value","key","urlQueryParamsGetAll","getAll","urlQueryParamsJoin","object","urlStr","index","userLoginInfo","setActiveBranchIdCookie","data","stringData","JSON","stringify","base64","removeActiveBranchIdCookie","getActiveBranchIdCookie","_cookie","parse","id","Number","name","String","accountId","GET_ClientBranches","type","_get_cookie","url","HTTP","method","headers","Authorization","token","error","console","errorHttp","PdbRedirection","constructor","super","redirectPage","message","loading","verifyingToken","connectedCallback","this","getToken","getRedirectPage","setInterval","log","verifyToken","render","firstUpdated","setTimeout","permissionKey","_permissionKey","href","accessPageKey","_accessPageKey","redirectToPage","_networkResponse","verify_token","formData","http","body","then","catch","POST_VerifyTokenAlt","RESPONSE","response","success","_branches","user","branchId","Array","isArray","createRenderRoot","styles","Boolean"],"sourceRoot":""}